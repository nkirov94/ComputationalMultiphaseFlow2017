classdef MomentumStep
    
    methods (Static)
        %% EXPLICIT FRACTIONAL VELOCITY SOLVER
        function [ufrac, vfrac, w] = FractionalVelocityExplicitSolver(Geometry, jin, ...
                N_xtot, N_ytot, un, unm1, unm2, vn, vnm1, vnm2, wn, wnm1, wnm2, pn, pnm1, pnm2, ...
                dxblock, dyblock, xnodel, ynodel, rhoc, mueffc, dt, Uin, Vin, Win)
            
            for i = 2:(N_xtot-1)
                for j = 2:(N_ytot-1)
                    TimeDiscretizer = 1;
                    switch TimeDiscretizer
                        case 1 %Euler-forward
                            [XmomRHSn] = MomentumStep.XmomentumRHS(Geometry, un, vn, ...
                                pn, N_xtot, i, j, dxblock, dyblock, xnodel, ynodel, mueffc, rhoc);
                            ufrac(i,j) = un(i,j) + dt*XmomRHSn;
                            if(j<(N_ytot-1))
                                [YmomRHSn] = MomentumStep.YmomentumRHS(Geometry, un, vn, wn, ...
                                    pn, N_xtot, i, j, dxblock, dyblock, xnodel, ynodel, mueffc, rhoc);
                                vfrac(i,j) = vn(i,j) + dt*YmomRHSn;
                            end
                            if(Geometry == 3)
                                [ZmomRHSn] = MomentumStep.ZmomentumRHS(Geometry, un, vn, wn, ...
                                    i, j, dxblock, dyblock, xnodel, ynodel, mueffc, rhoc);
                                w(i,j) = wn(i,j) + dt*ZmomRHSn;
                            else; w(i,j) = wn(i,j); end
            %UPDATE BELOW!!!
                        case 2 %Adams-Bashforth 2nd order
                            [XmomRHSnm1] = MomentumStep.XmomentumRHS(Geometry, unm1, vnm1, pnm1, ...
                                N_xtot, i, j, dxblock, dyblock, xnodel, ynodel, mueffc, rhoc);
                            [XmomRHSn] = MomentumStep.XmomentumRHS(Geometry, un, vn, pn, ...
                                N_xtot, i, j, dxblock, dyblock, xnodel, ynodel, mueffc, rhoc);
                            ufrac(i,j) = un(i,j) + dt*(3/2*XmomRHSn - 1/2*XmomRHSnm1);
                            if(j < (N_ytot-1))
                                [YmomRHSnm1] = MomentumStep.YmomentumRHS(Geometry, unm1, vnm1, wnm1, pnm1, ...
                                    N_xtot, i, j, dxblock, dyblock, xnodel, ynodel, mueffc, rhoc);
                                [YmomRHSn] = MomentumStep.YmomentumRHS(Geometry, un, vn, wn, pn, ...
                                    N_xtot, i, j, dxblock, dyblock, xnodel, ynodel, mueffc, rhoc);
                                vfrac(i,j) = vn(i,j) + dt*(3/2*YmomRHSn - 1/2*YmomRHSnm1);
                            end
                            if(Geometry == 3)
                                [ZmomRHSnm1] = MomentumStep.ZmomentumRHS(Geometry, unm1, vnm1, wnm1, ...
                                    i, j, dxblock, dyblock, xnodel, ynodel, mueffc, rhoc);
                                [ZmomRHSn] = MomentumStep.ZmomentumRHS(Geometry, un, vn, wn, ...
                                    i, j, dxblock, dyblock, xnodel, ynodel, mueffc, rhoc);
                                w(i,j) = wn(i,j) + dt*(3/2*ZmomRHSn - 1/2*ZmomRHSnm1);
                            else; w(i,j) = wn(i,j); end
                        case 3 %Adams-Bashforth 3rd order
                            [XmomRHSnm2] = MomentumStep.XmomentumRHS(Geometry, unm2, vnm2, pnm2, ...
                                N_xtot, i, j, dxblock, dyblock, xnodel, ynodel, mueffc, rhoc);
                            [XmomRHSnm1] = MomentumStep.XmomentumRHS(Geometry, unm1, vnm1, pnm1, ...
                                N_xtot, i, j, dxblock, dyblock, xnodel, ynodel, mueffc, rhoc);
                            [XmomRHSn] = MomentumStep.XmomentumRHS(Geometry, un, vn, pn, ...
                                N_xtot, i, j, dxblock, dyblock, xnodel, ynodel, mueffc, rhoc);
                            ufrac(i,j) = un(i,j) + dt*(23/12*XmomRHSn - 16/12*XmomRHSnm1 + 5/12*XmomRHSnm2);
                            if(j < (N_ytot-1))
                                [YmomRHSnm2] = MomentumStep.YmomentumRHS(Geometry, unm2, vnm2, wnm2, pnm2, ...
                                    N_xtot, i, j, dxblock, dyblock, xnodel, ynodel, mueffc, rhoc);
                                [YmomRHSnm1] = MomentumStep.YmomentumRHS(Geometry, unm1, vnm1, wnm1, pnm1, ...
                                    N_xtot, i, j, dxblock, dyblock, xnodel, ynodel, mueffc, rhoc);
                                [YmomRHSn] = MomentumStep.YmomentumRHS(Geometry, un, vn, wn, pn, ...
                                    N_xtot, i, j, dxblock, dyblock, xnodel, ynodel, mueffc, rhoc);
                                vfrac(i,j) = vn(i,j) + dt*(23/12*YmomRHSn - 16/12*YmomRHSnm1 + 5/12*YmomRHSnm2);
                            end
                            if(Geometry == 3)
                                [ZmomRHSnm1] = MomentumStep.ZmomentumRHS(Geometry, unm2, vnm2, wnm2, ...
                                    i, j, dxblock, dyblock, xnodel, ynodel, mueffc, rhoc);
                                [ZmomRHSnm1] = MomentumStep.ZmomentumRHS(Geometry, unm1, vnm1, wnm1, ...
                                    i, j, dxblock, dyblock, xnodel, ynodel, mueffc, rhoc);
                                [ZmomRHSn] = MomentumStep.ZmomentumRHS(Geometry, un, vn, wn, ...
                                    i, j, dxblock, dyblock, xnodel, ynodel, mueffc, rhoc);
                                w(i,j) = wn(i,j) + dt*(23/12*ZmomRHSn - 16/12*ZmomRHSnm1 + 5/12*ZmomRHSnm2);
                            else; w(i,j) = wn(i,j); end
                        case 4 %Runge-Kutta 4th order
                            k1 = MomentumStep.XmomentumRHS(Geometry, un, vn, pn, ...
                                N_xtot, i, j, dxblock, dyblock, xnodel, ynodel, mueffc, rhoc);
                            k2 = MomentumStep.XmomentumRHS(Geometry, un + 1/2*dt*k1, vn, pn, ...
                                N_xtot, i, j, dxblock, dyblock, xnodel, ynodel, mueffc, rhoc);
                            k3 = MomentumStep.XmomentumRHS(Geometry, un + 1/2*dt*k2, vn, pn, ...
                                N_xtot, i, j, dxblock, dyblock, xnodel, ynodel, mueffc, rhoc);
                            k4 = MomentumStep.XmomentumRHS(Geometry, un + dt*k3, vn, pn, ...
                                N_xtot, i, j, dxblock, dyblock, xnodel, ynodel, mueffc, rhoc);
                            ufrac(i,j) = un(i,j) + 1/6*(k1 + k2 + k3 + k4)*dt;
                            if(j < (N_ytot-1))
                                k1 = MomentumStep.YmomentumRHS(Geometry, un, vn, wn, pn, ...
                                    N_xtot, i, j, dxblock, dyblock, xnodel, ynodel, mueffc, rhoc);
                                k2 = MomentumStep.YmomentumRHS(Geometry, un, vn + 1/2*dt*k1, wn, pn, ...
                                    N_xtot, i, j, dxblock, dyblock, xnodel, ynodel, mueffc, rhoc);
                                k3 = MomentumStep.YmomentumRHS(Geometry, un, vn + 1/2*dt*k2, wn, pn, ...
                                    N_xtot, i, j, dxblock, dyblock, xnodel, ynodel, mueffc, rhoc);
                                k4 = MomentumStep.YmomentumRHS(Geometry, un, vn + dt*k3, wn, pn, ...
                                    N_xtot, i, j, dxblock, dyblock, xnodel, ynodel, mueffc, rhoc);
                                vfrac(i,j) = vn(i,j) + 1/6*(k1 + k2 + k3 + k4)*dt;
                            end
                            if(Geometry == 3)
                                k1 = MomentumStep.ZmomentumRHS(Geometry, un, vn, wn, ...
                                    i, j, dxblock, dyblock, xnodel, ynodel, mueffc, rhoc);
                                k2 = MomentumStep.ZmomentumRHS(Geometry, un, vn, wn + 1/2*dt*k1, ...
                                    i, j, dxblock, dyblock, xnodel, ynodel, mueffc, rhoc);
                                k3 = MomentumStep.ZmomentumRHS(Geometry, un, vn, wn + 1/2*dt*k2, ...
                                    i, j, dxblock, dyblock, xnodel, ynodel, mueffc, rhoc);
                                k4 = MomentumStep.ZmomentumRHS(Geometry, un, vn, wn + dt*k3, ...
                                    i, j, dxblock, dyblock, xnodel, ynodel, mueffc, rhoc);
                                w(i,j) = wn(i,j) + 1/6*(k1 + k2 + k3 + k4)*dt;
                            else; w(i,j) = wn(i,j); end
                    end

                end
            end

            %Boundary conditions on fractional velocities!
            [ufrac, vfrac, w] = MomentumStep.VelocityBC(ufrac, vfrac, w, ...
                N_xtot, N_ytot, Uin, Vin, Win, jin);
        end
        
        %% IMPLICIT FRACTIONAL VELOCITY SOLVER (NON-OPERATIONAL)
        function [ufrac, vfrac, w, STU, STV, AmatU, AmatV, ufrac_vec, ...
                vfrac_vec, residu] = FractionalVelocityImplicitSolver(Geometry, ...
                jin, N_xtot, N_ytot, un, vn, wn, pn, dxblock, dyblock, xnodel, ynodel, ...
                rhoc, mueffc, dt, Uin, Vin, Win)
            
% % %             %Trial explicit u
% % %             for i=2:(N_xtot-1)
% % %                 for j=2:(N_ytot-1)
% % %                     k1 = MomentumStep.XmomentumRHS(Geometry, un, vn, pn, ...
% % %                         N_xtot, i, j, dxblock, dyblock, xnodel, ynodel, ...
% % %                         mueffc, rhoc);
% % %                     k2 = MomentumStep.XmomentumRHS(Geometry, un + 1/2*dt*k1, ...
% % %                         vn, pn, N_xtot, i, j, dxblock, dyblock, xnodel, ynodel, ...
% % %                         mueffc, rhoc);
% % %                     k3 = MomentumStep.XmomentumRHS(Geometry, un + 1/2*dt*k2, ...
% % %                         vn, pn, N_xtot, i, j, dxblock, dyblock, xnodel, ynodel, ...
% % %                         mueffc, rhoc);
% % %                     k4 = MomentumStep.XmomentumRHS(Geometry, un + dt*k3, ...
% % %                         vn, pn, N_xtot, i, j, dxblock, dyblock, xnodel, ynodel, ...
% % %                         mueffc, rhoc);
% % %                     ufrac(i,j) = un(i,j) + 1/6*(k1 + k2 + k3 + k4)*dt;
% % %                 end
% % %             end
% % %             STU = 0; AmatU = 0; ufrac_vec = 0; residu = 0;
            %%Trial implicit u
            %ufrac = un;
            residu = 1;
%             for povtorenie = 1:2
                %un = ufrac;
                
                %Call source term calculator function
                [STU] = MomentumStep.SourceTermU(Geometry, dt, un, vn, pn, jin, ...
                    Uin, rhoc, mueffc, xnodel, ynodel, N_xtot, ...
                    N_ytot, dxblock, dyblock);
                
                %Reshape source term U
                STUreshape = reshape(STU, (N_xtot-2)*(N_ytot-2),1); 
                %Reshape to [stu11; stu21; stu31...] %N_xtot-3

                %Set-up A matrix U
                [AmatU] = MomentumStep.SetUpMatrixU(dt, un, vn, ...
                    N_xtot, N_ytot, dxblock, dyblock, xnodel, ynodel, ...
                    rhoc, mueffc);
                
                %Under-relaxation if factor is (URfac < 1), 
                %Over-relaxation if (URfac > 1)
                un_vec = ...
                    reshape(un(2:N_xtot-1,2:N_ytot-1), (N_xtot-2)*(N_ytot-2), 1);
                URfacU = 1;
                STUreshape = STUreshape + (1-URfacU)/URfacU*diag(AmatU).*un_vec;
                AmatU(logical(eye(size(AmatU)))) = diag(AmatU)/URfacU;
                
                %Solve for ufrac using mldivide
                ufrac_vec = AmatU\STUreshape;

                %Reshape u* solution to a (N_xtot-1)*N_ytot matrix
                ufracaux = reshape(ufrac_vec, N_xtot-2, N_ytot-2);
                rows = ones(1,N_ytot-2);
                ufracaux = [rows; ufracaux];
                cols = ones(N_xtot-1,1);
                ufrac = [cols ufracaux cols];
                vndummy = vn; wndummy = wn;
                [ufrac, ~] = MomentumStep.VelocityBC(ufrac, vndummy, wndummy, ...
                    N_xtot, N_ytot, Uin, Vin, Win, jin);
                %residu = norm(ufrac-un)
%             end

            %%explicit v trial
%             for i=2:N_xtot-1
%                 for j=2:N_ytot-2
%                     k1 = MomentumStep.YmomentumRHS(Geometry, un, ...
%                         vn, pn, N_xtot, N_ytot, i, j, dxblock, ...
%                         dyblock, xnodel, ynodel, mueffc, rhoc);
%                     k2 = MomentumStep.YmomentumRHS(Geometry, un, ...
%                         vn + 1/2*dt*k1, pn, N_xtot, N_ytot, i, j, ...
%                         dxblock, dyblock, xnodel, ynodel, mueffc, rhoc);
%                     k3 = MomentumStep.YmomentumRHS(Geometry, un, ...
%                         vn + 1/2*dt*k2, pn, N_xtot, N_ytot, i, j, ...
%                         dxblock, dyblock, xnodel, ynodel, mueffc, rhoc);
%                     k4 = MomentumStep.YmomentumRHS(Geometry, un, ...
%                         vn + dt*k3, pn, N_xtot, N_ytot, i, j, dxblock, ...
%                         dyblock, xnodel, ynodel, mueffc, rhoc);
%                     vfrac(i,j) = vn(i,j) + 1/6*(k1 + k2 + k3 + k4)*dt;
%                 end
%             end   
%             STV = 0; AmatV = 0;  vfrac_vec = 0;

            %implicit v trial
            [STV] = MomentumStep.SourceTermV(Geometry, dt, un, vn, pn, jin, Uin, ...
                rhoc, mueffc, xnodel, ynodel, N_xtot, N_ytot, ...
                dxblock, dyblock);

            %Reshape source term V
            STVreshape = reshape(STV, (N_xtot-2)*(N_ytot-3),1); %Reshape:[stv11; stv21...]

            %Set-up A matrix V
            [AmatV] = MomentumStep.SetUpMatrixV(dt, un, vn, N_xtot, N_ytot, ...
                dxblock, dyblock, xnodel, ynodel, rhoc, mueffc);
            
            %Under-relaxation if factor is (URfac < 1), Over-relaxation if (URfac > 1)
            vn_vec = ...
                reshape(vn(2:N_xtot-1,2:N_ytot-2), (N_xtot-2)*(N_ytot-3), 1);
            URfacV = 1;
            STVreshape = STVreshape + ...
                (1-URfacV)/URfacV*diag(AmatV).*vn_vec;
            AmatV(logical(eye(size(AmatV)))) = diag(AmatV)/URfacV;
            
            %Solve for ufrac using mldivide
            vfrac_vec = AmatV\STVreshape;

            %Reshape v* solution to a (N_xtot)*(N_ytot-1) matrix
            vfracaux = reshape(vfrac_vec, N_xtot-2, N_ytot-3);
            rows = ones(1,N_ytot-3);
            vfracaux = [rows; vfracaux; rows];
            cols = ones(N_xtot,1);
            vfrac = [cols vfracaux cols];            
            
            %w - temporary
            w = wn;
            
            %Boundary conditions on fractional velocities!
            [ufrac, vfrac, w] = MomentumStep.VelocityBC(ufrac, vfrac, w, N_xtot, N_ytot, Uin, Vin, Win, jin);

        end
        
    end
    
    methods (Static)
%% USED FOR BOTH EXPLICIT AND IMPLICIT FRACTIONAL VELOCITY SOLVERS
        %% Boundary conditions
        function [u, v, w] = VelocityBC(u, v, w, N_xtot, N_ytot, Uin, Vin, Win, jin)
            %Auxiliary extention of matrices:
            u(:,N_ytot) = 0; v(:,N_ytot-1) = 0;
            
            %Centerline BCs:
            u(:,1) = u(:,2);                              %Neumann BC
            v(:,1) = 0;                                   %Dirichlet BC
            w(:,1) = - w(:,2);                            %Dirichlet BC
            
            %Wall BCs:
            u(:,N_ytot) = - u(:,N_ytot-1);                %Dirichlet BC
            v(:,N_ytot-1) = 0;                            %Dirichlet BC
            w(:,N_ytot) = - w(:,N_ytot-1);                %Dirichlet BC 
            
            %Outlet BCs:
            v(N_xtot,:) = v(N_xtot-1,:);                  %Neumann BC
            w(N_xtot,:) = w(N_xtot-1,:);                  %Neumann BC
            
            %Incoming BCs (inlet):
            u(1,1:jin) = Uin;                             %Dirichlet BC
            v(1,1:(jin-1)) = Vin;                         %Dirichlet BC
            w(1,1:jin) = 2*Win - w(2,1:jin);              %Dirichlet BC
            %Incoming BCs (wall):
            u(1,(jin+1):N_ytot) = 0;                      %Dirichlet BC
            v(1,jin:(N_ytot-1)) = - v(2, jin:(N_ytot-1)); %Dirichlet BC
            w(1,(jin+1):N_ytot) = - w(2,(jin+1):N_ytot);  %Dirichlet BC
        end
        
%% USED FOR EXPLICIT FRACTIONAL VELOCITY SOLVER
        %% Right hand side of X-momentum equation
        function [XmomRHS] = XmomentumRHS(Geometry, u, v, p, N_xtot, ...
                i, j, dxblock, dyblock, xnodel, ynodel, mueffc, rhoc)
            %ADVECTION
            if(i<(N_xtot-1))
                %Flux in X
                Fwest = rhoc*((u(i,j)+u(i-1,j))^2)/4 - ...
                    2*mueffc(i,j)*(u(i,j)-u(i-1,j))/dxblock(i,j) + p(i,j); %check
                Feast = rhoc*((u(i+1,j)+u(i,j))^2)/4 - ...
                    2*mueffc(i+1,j)*(u(i+1,j)-u(i,j))/dxblock(i+1,j) + p(i+1,j); %check
                
                %Flux in Y
                rho_1 = rhoc;
                v1 = ((v(i,j-1)*dxblock(i+1,j)+v(i+1,j-1)*dxblock(i,j))/...
                    (dxblock(i+1,j)+dxblock(i,j))); %check
                mu1 = ((mueffc(i,j)*dxblock(i+1,j) + ...
                    mueffc(i+1,j)*dxblock(i,j))/...
                    (dxblock(i+1,j)+dxblock(i,j))*dyblock(i,j-1) + ...
                    (mueffc(i,j-1)*dxblock(i+1,j-1) + mueffc(i+1,j-1)*...
                    dxblock(i,j-1))/(dxblock(i+1,j-1)+dxblock(i,j-1))*dyblock(i,j))/...
                    (dyblock(i,j)+dyblock(i,j-1)); %check
                rho_2 = rhoc;
                v2 = ((v(i,j)*dxblock(i+1,j)+v(i+1,j)*dxblock(i,j))/...
                    (dxblock(i+1,j)+dxblock(i,j))); %check
                mu2 = ((mueffc(i,j)*dxblock(i+1,j) + mueffc(i+1,j)*dxblock(i,j))...
                    /(dxblock(i+1,j)+dxblock(i,j))*dyblock(i,j+1) + ...
                    (mueffc(i,j+1)*dxblock(i+1,j+1) + mueffc(i+1,j+1)*dxblock(i,j+1))...
                    /(dxblock(i+1,j+1)+dxblock(i,j+1))*dyblock(i,j))/...
                    (dyblock(i,j)+dyblock(i,j+1)); %check
                
                Gsouth = rho_1*v1*(u(i,j-1)*dyblock(i,j) + u(i,j)*dyblock(i,j-1))/...
                    (dyblock(i,j) + dyblock(i,j-1)) - ...
                    mu1*((u(i,j)-u(i,j-1))/(ynodel(i,j)-ynodel(i,j-1)) + ...
                    (v(i+1,j-1) - v(i,j-1))/(xnodel(i+1,j)-xnodel(i,j))); %check
                Gnorth = rho_2*v2*(u(i,j)*dyblock(i,j+1) + u(i,j+1)*dyblock(i,j))/...
                    (dyblock(i,j+1) + dyblock(i,j)) - ...
                    mu2*((u(i,j+1)-u(i,j))/(ynodel(i,j+1)-ynodel(i,j)) + ...
                    (v(i+1,j) - v(i,j))/(xnodel(i+1,j)-xnodel(i,j))); %check
                
                du_dx = ((u(i+1,j) + u(i,j))/2 - (u(i,j) + u(i-1,j))/2)/...
                    (xnodel(i+1,j)-xnodel(i,j));
                dv_dx_plus_du_dy=(((v(i+1,j-1)+v(i+1,j))/2 - (v(i,j) + v(i,j-1))/2)/...
                    (xnodel(i+1,j)-xnodel(i,j)) + ...
                    ((u(i,j+1)*dyblock(i,j)+u(i,j)*dyblock(i,j+1))/...
                    (dyblock(i,j)+dyblock(i,j+1)) - ...
                    (u(i,j)*dyblock(i,j-1) + u(i,j-1)*dyblock(i,j))/...
                    (dyblock(i,j)+dyblock(i,j-1)))/dyblock(i,j));
                
                %Source Term (Axisymmetric)
                if(Geometry == 2)
                    SourceX = 1/(rhoc*ynodel(i,j))*...
                        (mueffc(i+1,j)*dxblock(i,j)+mueffc(i,j)*dxblock(i+1,j))/...
                        (dxblock(i+1,j)+dxblock(i,j))*dv_dx_plus_du_dy - ...
                        u(i,j)/ynodel(i,j)*((v(i+1,j) + v(i+1,j-1))/2*dxblock(i,j) ...
                        + (v(i,j) + v(i,j-1))/2*dxblock(i+1,j))/...
                        (dxblock(i+1,j) + dxblock(i,j));
                else; SourceX = 0; end;
                
                %RHS
                XmomRHS = 1/rhoc*((Fwest - Feast)/(xnodel(i+1,j)-xnodel(i,j)) + ...
                    (Gsouth - Gnorth)/(dyblock(i,j))) + SourceX;
            elseif(i == (N_xtot-1))
                %Implicit BC for continuing outlet u-velocity = Fully-Developed Steady State
                %Flux in X
                Fwest = rhoc*((u(i,j)+u(i-1,j))^2)/4 - ...
                    2*mueffc(i,j)*(u(i,j)-u(i-1,j))/dxblock(i,j) + p(i,j);
                Feast = rhoc*((u(i,j)+u(i,j))^2)/4 - ...
                    2*mueffc(i+1,j)*(u(i,j)-u(i,j))/dxblock(i+1,j) + p(i+1,j);
                
                %Flux in Y
                rho_1 = rhoc; %no change
                v1 = ((v(i,j-1)*dxblock(i+1,j)+v(i+1,j-1)*...
                    dxblock(i,j))/(dxblock(i+1,j)+dxblock(i,j))); %no change
                mu1 = ((mueffc(i,j)*dxblock(i+1,j) + ...
                    mueffc(i+1,j)*dxblock(i,j))/(dxblock(i+1,j)+dxblock(i,j))*...
                    dyblock(i,j-1) + ...
                    (mueffc(i,j-1)*dxblock(i+1,j-1) + ...
                    mueffc(i+1,j-1)*dxblock(i,j-1))/...
                    (dxblock(i+1,j-1)+dxblock(i,j-1))*dyblock(i,j))/...
                    (dyblock(i,j)+dyblock(i,j-1)); %no change
                rho_2 = rhoc; %no change
                v2 = ((v(i,j)*dxblock(i+1,j)+v(i+1,j)*dxblock(i,j))/...
                    (dxblock(i+1,j)+dxblock(i,j)));
                mu2 = ((mueffc(i,j)*dxblock(i+1,j) + ...
                    mueffc(i+1,j)*dxblock(i,j))/(dxblock(i+1,j)+dxblock(i,j))*...
                    dyblock(i,j+1) + ...
                    (mueffc(i,j+1)*dxblock(i+1,j+1) + ...
                    mueffc(i+1,j+1)*dxblock(i,j+1))/...
                    (dxblock(i+1,j+1)+dxblock(i,j+1))*dyblock(i,j))/...
                    (dyblock(i,j)+dyblock(i,j+1)); %no change
                
                Gsouth = rho_1*v1*(u(i,j-1)*dyblock(i,j) + ...
                    u(i,j)*dyblock(i,j-1))/(dyblock(i,j) + dyblock(i,j-1)) - ...
                    mu1*((u(i,j)-u(i,j-1))/(ynodel(i,j)-ynodel(i,j-1)) ...
                    + (v(i+1,j-1) - v(i,j-1))/(xnodel(i+1,j)-xnodel(i,j)));
                Gnorth = rho_2*v2*((u(i,j)*dyblock(i,j+1) + u(i,j+1)*...
                    dyblock(i,j))/(dyblock(i,j+1) + dyblock(i,j))) - ...
                    mu2*((u(i,j+1)-u(i,j))/(ynodel(i,j+1)-ynodel(i,j)) ...
                    + (v(i+1,j) - v(i,j))/(xnodel(i+1,j)-xnodel(i,j)));
                
                du_dx = ((u(i,j) + u(i,j))/2 - (u(i,j) + u(i-1,j))/2)/...
                    (xnodel(i+1,j)-xnodel(i,j));
                dv_dx_plus_du_dy=(((v(i+1,j-1)+v(i+1,j))/2 - (v(i,j) + v(i,j-1))/2)/...
                    (xnodel(i+1,j)-xnodel(i,j)) + ...
                    ((u(i,j+1)*dyblock(i,j)+u(i,j)*dyblock(i,j+1))/...
                    (dyblock(i,j)+dyblock(i,j+1)) - ...
                    (u(i,j)*dyblock(i,j-1) + u(i,j-1)*dyblock(i,j))/...
                    (dyblock(i,j)+dyblock(i,j-1)))/dyblock(i,j));
                
                %Source Term (Axisymmetric)
                if(Geometry == 2)
                    SourceX = 1/(rhoc*ynodel(i,j))*...
                        (mueffc(i+1,j)*dxblock(i,j)+mueffc(i,j)*dxblock(i+1,j))...
                        /(dxblock(i+1,j)+dxblock(i,j))*dv_dx_plus_du_dy - ...
                        u(i,j)/ynodel(i,j)*((v(i+1,j)+v(i+1,j-1))/2*dxblock(i,j) ...
                        + (v(i,j) + v(i,j-1))/2*dxblock(i+1,j))/...
                        (dxblock(i+1,j) + dxblock(i,j));
                else; SourceX = 0; end;
                
                %RHS
                XmomRHS = 1/rhoc*((Fwest - Feast)/(xnodel(i+1,j)-xnodel(i,j)) ...
                    + (Gsouth - Gnorth)/(dyblock(i,j))) + SourceX;
            end
        end
        
        %% Right hand side of Y-momentum equation
        function [YmomRHS] = YmomentumRHS(Geometry, u, v, w, p, N_xtot, ...
                i, j, dxblock, dyblock, xnodel, ynodel, mueffc, rhoc) 
            %found mistake! bracket of ((mu was in the lower mu. first in -> mu
            muWest = ((mueffc(i,j)*dyblock(i,j+1)+mueffc(i,j+1)*dyblock(i,j))/... 
                    (dyblock(i,j+1)+dyblock(i,j))*dxblock(i-1,j) + ...
                    (mueffc(i-1,j)*dyblock(i-1,j+1) + mueffc(i-1,j+1)*dyblock(i-1,j))/...
                    (dyblock(i-1,j+1)+dyblock(i-1,j))*dxblock(i,j))/(dxblock(i-1,j)+dxblock(i,j));
            muEast = ((mueffc(i,j)*dyblock(i,j+1) + mueffc(i,j+1)*dyblock(i,j))/...
                    (dyblock(i,j+1)+dyblock(i,j))*dxblock(i+1,j) + ...
                    (mueffc(i+1,j)*dyblock(i+1,j+1) + mueffc(i+1,j+1)*dyblock(i+1,j))/...
                    (dyblock(i+1,j+1)+dyblock(i+1,j))*dxblock(i,j))/(dxblock(i+1,j)+dxblock(i,j));
            if(i<(N_xtot-1))
                %Flux in X
                Fwest = rhoc*(u(i-1,j+1)*dyblock(i,j) + ...
                    u(i-1,j)*dyblock(i,j+1))/(dyblock(i,j)+dyblock(i,j+1))*...
                    (v(i,j)*dxblock(i-1,j)+v(i-1,j)*dxblock(i,j))/...
                    (dxblock(i-1,j)+dxblock(i,j)) - ... 
                    muWest*((u(i-1,j+1) - u(i-1,j))/(ynodel(i,j+1)-ynodel(i,j)) + ...
                    (v(i,j) - v(i-1,j))/(xnodel(i,j)-xnodel(i-1,j)));
                Feast = rhoc*(u(i,j+1)*dyblock(i,j) + ...
                    u(i,j)*dyblock(i,j+1))/(dyblock(i,j)+dyblock(i,j+1))* ...
                    ((v(i+1,j)*dxblock(i,j) + v(i,j)*dxblock(i+1,j))/...
                    (dxblock(i,j) + dxblock(i+1,j))) - ...
                    muEast*((u(i,j+1) - u(i,j))/(ynodel(i,j+1)-ynodel(i,j)) + ...
                    (v(i+1,j) - v(i,j))/(xnodel(i+1,j)-xnodel(i,j)));

                %Flux in Y
                Gsouth = rhoc*((v(i,j) + v(i,j-1))/2)^2 - ...
                    2*mueffc(i,j)*(v(i,j)-v(i,j-1))/dyblock(i,j) + p(i,j);
                Gnorth = rhoc*((v(i,j+1) + v(i,j))/2)^2 - ...
                    2*mueffc(i,j+1)*(v(i,j+1)-v(i,j))/dyblock(i,j+1) + p(i,j+1);
                
                dv_dy = ((v(i,j+1)+v(i,j))/2 - (v(i,j) + v(i,j-1))/2)/(ynodel(i,j+1)-ynodel(i,j));
                
                %Source Term (Axisymmetric)
                if(Geometry == 2)
                    SourceY = -((v(i,j))^2)/(ynodel(i,j) + dyblock(i,j)/2) + ...
                        2/rhoc*(mueffc(i,j+1)*dyblock(i,j) + ...
                        mueffc(i,j)*dyblock(i,j+1))/...
                        (dyblock(i,j)+dyblock(i,j+1))*dv_dy - ...
                        2/rhoc*(mueffc(i,j+1)*dyblock(i,j) + ...
                        mueffc(i,j)*dyblock(i,j+1))/(dyblock(i,j) +...
                        dyblock(i,j+1))*v(i,j)/((ynodel(i,j) + dyblock(i,j)/2)^2);
                elseif(Geometry == 3)
                    SourceY = -((v(i,j))^2)/(ynodel(i,j) + dyblock(i,j)/2) + ...
                        2/rhoc*(mueffc(i,j+1)*dyblock(i,j) + ...
                        mueffc(i,j)*dyblock(i,j+1))/...
                        (dyblock(i,j)+dyblock(i,j+1))*dv_dy - ...
                        2/rhoc*(mueffc(i,j+1)*dyblock(i,j) + ...
                        mueffc(i,j)*dyblock(i,j+1))/(dyblock(i,j) +...
                        dyblock(i,j+1))*v(i,j)/((ynodel(i,j) + dyblock(i,j)/2)^2) + ...
                        rhoc*((w(i,j)*(dyblock(i,j+1)+w(i,j+1)*dyblock(i,j))/...
                        (dyblock(i,j)+dyblock(i,j+1)))^2)/(ynodel(i,j) + dyblock(i,j)/2);
                else; SourceY = 0; end;
                
                %RHS
                YmomRHS =  1/rhoc*((Fwest - Feast)/(dxblock(i,j)) + ...
                    (Gsouth - Gnorth)/(ynodel(i,j+1)-ynodel(i,j))) + SourceY;
            else
                %Flux in X
                Fwest = rhoc*(u(i-1,j+1)*dyblock(i,j) + ...
                    u(i-1,j)*dyblock(i,j+1))/(dyblock(i,j)+dyblock(i,j+1))*...
                    (v(i,j)*dxblock(i-1,j)+v(i-1,j)*dxblock(i,j))/...
                    (dxblock(i-1,j)+dxblock(i,j)) - ...
                    muWest*((u(i-1,j+1) - u(i-1,j))/(ynodel(i,j+1)-ynodel(i,j)) + ...
                    (v(i,j) - v(i-1,j))/(xnodel(i,j)-xnodel(i-1,j)));
                Feast = rhoc*(u(i,j+1)*dyblock(i,j) + u(i,j)*...
                    dyblock(i,j+1))/(dyblock(i,j)+dyblock(i,j+1))* ...
                    ((v(i,j)*dxblock(i,j) + v(i,j)*dxblock(i+1,j))/...
                    (dxblock(i,j) + dxblock(i+1,j))) - ...
                    muEast*((u(i,j+1) - u(i,j))/(ynodel(i,j+1)-ynodel(i,j)) + ...
                    (v(i,j) - v(i,j))/(xnodel(i+1,j)-xnodel(i,j)));

                %Flux in Y
                Gsouth = rhoc*((v(i,j) + v(i,j-1))/2)^2 - ...
                    2*mueffc(i,j)*(v(i,j)-v(i,j-1))/dyblock(i,j) + p(i,j);
                Gnorth = rhoc*((v(i,j+1) + v(i,j))/2)^2 - ...
                    2*mueffc(i,j+1)*(v(i,j+1)-v(i,j))/...
                    dyblock(i,j+1) + p(i,j+1);
                
                dv_dy = ((v(i,j+1)+v(i,j))/2 - (v(i,j) + v(i,j-1))/2)/...
                        (ynodel(i,j+1)-ynodel(i,j));
                
                %Source Term (Axisymmetric)
                if(Geometry == 2)
                    SourceY = -((v(i,j))^2)/(ynodel(i,j) + dyblock(i,j)/2) + ...
                        2/rhoc*(mueffc(i,j+1)*dyblock(i,j) + ...
                        mueffc(i,j)*dyblock(i,j+1))/(dyblock(i,j)+dyblock(i,j+1))* ...
                        ((v(i,j+1)+v(i,j))/2 - ...
                        (v(i,j) + v(i,j-1))/2)/(ynodel(i,j+1)-ynodel(i,j)) - ...
                        2/rhoc*(mueffc(i,j+1)*dyblock(i,j) + ...
                        mueffc(i,j)*dyblock(i,j+1))/...
                        (dyblock(i,j)+dyblock(i,j+1))*v(i,j)/...
                        ((ynodel(i,j) + dyblock(i,j)/2)^2);
                elseif(Geometry == 3)
                    SourceY = -((v(i,j))^2)/(ynodel(i,j) + dyblock(i,j)/2) + ...
                        2/rhoc*(mueffc(i,j+1)*dyblock(i,j) + ...
                        mueffc(i,j)*dyblock(i,j+1))/(dyblock(i,j)+dyblock(i,j+1))* ...
                        ((v(i,j+1)+v(i,j))/2 - ...
                        (v(i,j) + v(i,j-1))/2)/(ynodel(i,j+1)-ynodel(i,j)) - ...
                        2/rhoc*(mueffc(i,j+1)*dyblock(i,j) + ...
                        mueffc(i,j)*dyblock(i,j+1))/...
                        (dyblock(i,j)+dyblock(i,j+1))*v(i,j)/...
                        ((ynodel(i,j) + dyblock(i,j)/2)^2) + ...
                        rhoc*((w(i,j)*(dyblock(i,j+1)+w(i,j+1)*dyblock(i,j))/...
                        (dyblock(i,j)+dyblock(i,j+1)))^2)/(ynodel(i,j) + dyblock(i,j)/2);
                else; SourceY = 0; end;
                
                %RHS
                YmomRHS =  1/rhoc*( (Fwest - Feast)/dxblock(i,j) + ...
                    (Gsouth - Gnorth)/(ynodel(i,j+1)-ynodel(i,j)) ) + SourceY;
            end
             
        end
        
        %% Right hand side of Z-momentum equation
        function [ZmomRHS] = ZmomentumRHS(Geometry, u, v, w, ...
                i, j, dxblock, dyblock, xnodel, ynodel, mueffc, rhoc) %scalar control volume
            
            Fwest = rhoc*u(i-1,j)*(w(i,j)*dxblock(i-1,j)+w(i-1,j)*dxblock(i,j))/(dxblock(i,j)+dxblock(i-1,j)) - ...
                (mueffc(i,j)*dxblock(i-1,j)+mueffc(i-1,j)*dxblock(i,j))/(dxblock(i,j)+dxblock(i-1,j))*...
                (w(i,j)-w(i-1,j))/(xnodel(i,j)-xnodel(i-1,j));
            Feast = rhoc*u(i,j)*(w(i,j)*dxblock(i+1,j)+w(i+1,j)*dxblock(i,j))/(dxblock(i,j)+dxblock(i+1,j)) - ...
                (mueffc(i,j)*dxblock(i+1,j)+mueffc(i+1,j)*dxblock(i,j))/(dxblock(i,j)+dxblock(i+1,j))*...
                (w(i+1,j)-w(i,j))/(xnodel(i+1,j)-xnodel(i,j));
            
            Gsouth = rhoc*v(i,j-1)*(w(i,j)*dyblock(i,j-1)+w(i,j-1)*dyblock(i,j))/(dyblock(i,j)+dyblock(i,j-1)) - ...
                (mueffc(i,j)*dyblock(i,j-1)+mueffc(i,j-1)*dyblock(i,j))/(dyblock(i,j)+dyblock(i,j-1))*...
                (w(i,j)-w(i,j-1))/(ynodel(i,j)-ynodel(i,j-1));
            Gnorth = rhoc*v(i,j)*(w(i,j)*dyblock(i,j+1)+w(i,j+1)*dyblock(i,j))/(dyblock(i,j)+dyblock(i,j+1)) - ...
                (mueffc(i,j)*dyblock(i,j+1)+mueffc(i,j+1)*dyblock(i,j))/(dyblock(i,j)+dyblock(i,j+1))*...
                (w(i,j+1)-w(i,j))/(ynodel(i,j+1)-ynodel(i,j));
            
            if(Geometry == 2 || Geometry == 3)
                AdvectionSourceTerm = 1; %1 = upwind; 2 = central differencing
                if(AdvectionSourceTerm == 1); dwdy = (w(i,j) - w(i,j-1))/(ynodel(i,j)-ynodel(i,j-1)); %adv. const < 0 always
                elseif(AdvectionSourceTerm == 2); dwdy = (w(i,j+1) - w(i,j-1))/(ynodel(i,j+1)-ynodel(i,j-1)); end;
                
                SourceZ = - 2*rhoc*(v(i,j-1)+v(i,j))/2*w(i,j)/ynodel(i,j) + mueffc(i,j)/ynodel(i,j)*dwdy - ...
                    mueffc(i,j)*w(i,j)/(ynodel(i,j))^2;
            else; SourceZ = 0; end;
            
            %RHS
            ZmomRHS =  1/rhoc*((Fwest - Feast)/dxblock(i,j) + (Gsouth - Gnorth)/dyblock(i,j) + SourceZ);
        end
        
%% USED FOR IMPLICIT FRACTIONAL VELOCITY SOLVER
        %% A-matrix for implicit X-momentum equation
        function [AmatU] = SetUpMatrixU(dt, u, v, N_xtot, N_ytot, dxblock, ...
                dyblock, xnodel, ynodel, rhoc, mueffc)
        %Set-up pentadiagonal A matrix, rows:(N_xtot-2)*(N_ytot-2), cols:(N_xtot-2)*(N_ytot-2)!
            AmatU=zeros((N_xtot-2)*(N_ytot-2));
            
            for i=1:(N_xtot-2)
                for j=1:(N_ytot-2)
                    
                    k = 1/rhoc; 
                    rho_1 = rhoc; 
                    rho_2 = rhoc; 
                    v1 = (v(i+1,j)*dxblock(i+2,j+1) + v(i+2,j)*dxblock(i+1,j+1))/...
                        (dxblock(i+2,j+1) + dxblock(i+1,j+1));
                    v2 = (v(i+1,j+1)*dxblock(i+2,j+1) + v(i+2,j+1)*dxblock(i+1,j+1))...
                        /(dxblock(i+2,j+1)+dxblock(i+1,j+1));
                    mu1 = ((mueffc(i+1,j+1)*dxblock(i+2,j+1) + mueffc(i+2,j+1)*...
                        dxblock(i+1,j+1))/(dxblock(i+2,j+1)+dxblock(i+1,j+1))*dyblock(i+1,j) + ...
                        (mueffc(i+1,j)*dxblock(i+2,j) + mueffc(i+2,j)*dxblock(i+1,j))/...
                        (dxblock(i+2,j)+dxblock(i+1,j))*dyblock(i+1,j+1))/...
                        (dyblock(i+1,j+1) + dyblock(i+1,j));
                    mu2 = ((mueffc(i+1,j+1)*dxblock(i+2,j+1) + mueffc(i+2,j+1)*...
                        dxblock(i+1,j+1))/(dxblock(i+2,j+1)+dxblock(i+1,j+1))*...
                        dyblock(i+1,j+2) + ...
                        (mueffc(i+1,j+2)*dxblock(i+2,j+2) + mueffc(i+2,j+2)*...
                        dxblock(i+1,j+2))/...
                        (dxblock(i+2,j+2)+dxblock(i+1,j+2))*dyblock(i+1,j+1))/...
                        (dyblock(i+1,j+1) + dyblock(i+1,j+2));
                    
                    if(i < (N_xtot-2))
                        %Diagonal terms for u*(i,j) +1 on everything
                        AmatU(i+(j-1)*(N_xtot-2),i+(j-1)*(N_xtot-2)) = 1/dt - ...
                            k/(xnodel(i+2,j+1)-xnodel(i+1,j+1))* ... 
                            (rhoc*(u(i+1,j+1) + u(i,j+1))/4 - 2*mueffc(i+1,j+1)...
                            /dxblock(i+1,j+1)) + ...
                            k/(xnodel(i+2,j+1)-xnodel(i+1,j+1))*...
                            (rhoc*(u(i+2,j+1) + u(i+1,j+1))/4 + ...
                            2*mueffc(i+2,j+1)/dxblock(i+2,j+1)) - ...
                            k/dyblock(i+1,j+1)*(rho_1*v1)*dyblock(i+1,j)/...
                            (dyblock(i+1,j)+dyblock(i+1,j+1)) + ...
                            k/dyblock(i+1,j+1)*mu1/(ynodel(i+1,j+1)-ynodel(i+1,j)) + ...
                            k/dyblock(i+1,j+1)*(rho_2*v2)*dyblock(i+1,j+2)/...
                            (dyblock(i+1,j+2)+dyblock(i+1,j+1)) + ...
                            k/dyblock(i+1,j+1)*mu2/(ynodel(i+1,j+2)-ynodel(i+1,j+1));
                    else
                        %Diagonal terms for u*(i,j) with implicit BC for continuation outlet. 
                        %+1 on everything (u(N_xtot) = u(N_xtot-1))
                        AmatU(i+(j-1)*(N_xtot-2),i+(j-1)*(N_xtot-2)) = 1/dt - ...
                            k/(xnodel(i+2,j+1)-xnodel(i+1,j+1))* ... 
                            (rhoc*(u(i+1,j+1) + u(i,j+1))/4 - ...
                            2*mueffc(i+1,j+1)/dxblock(i+1,j+1)) + ... 
                            k/(xnodel(i+2,j+1)-xnodel(i+1,j+1))*...
                            (2*rhoc*(u(i+1,j+1) + u(i+1,j+1))/4) - ... 
                            k/dyblock(i+1,j+1)*(rho_1*v1)*dyblock(i+1,j)/...
                            (dyblock(i+1,j)+dyblock(i+1,j+1)) + ... 
                            k/dyblock(i+1,j+1)*mu1/(ynodel(i+1,j+1)-ynodel(i+1,j)) + ... 
                            k/dyblock(i+1,j+1)*(rho_2*v2)*dyblock(i+1,j+2)/...
                            (dyblock(i+1,j+2)+dyblock(i+1,j+1)) + ... 
                            k/dyblock(i+1,j+1)*mu2/(ynodel(i+1,j+2)-ynodel(i+1,j+1));  
                    end
                    
                    %Implicit BC: u*(:,N_ytot) = - u*(:,N_ytot-1);
                    if(j == (N_ytot-2))
                        AmatU(i+(j-1)*(N_xtot-2),i+(j-1)*(N_xtot-2)) = ...
                            AmatU(i+(j-1)*(N_xtot-2),i+(j-1)*(N_xtot-2)) - ...
                            k/dyblock(i+1,j+1)*(rho_2*v2)*dyblock(i+1,j+1)/...
                            (dyblock(i+1,j+1)+dyblock(i+1,j+2)) + ...
                            k/dyblock(i+1,j+1)*mu2/...
                            (ynodel(i+1,j+2) - ynodel(i+1,j+1)); 
                    end
                    
                    %Implicit BC: u*(:,1) = u*(:,2);
                    if(j == 1)
                        AmatU(i+(j-1)*(N_xtot-2),i+(j-1)*(N_xtot-2)) = ...
                            AmatU(i+(j-1)*(N_xtot-2),i+(j-1)*(N_xtot-2)) - ...
                            1/rhoc/dyblock(i+1,j+1)*...
                            (rhoc*(v(i+1,j)*dxblock(i+2,j+1) + ...
                            v(i+2,j)*dxblock(i+1,j+1))/...
                            (dxblock(i+2,j+1) + dxblock(i+1,j+1)))*...
                            dyblock(i+1,j+1)/(dyblock(i+1,j)+dyblock(i+1,j+1)) - ... 
                            1/rhoc/dyblock(i+1,j+1)*(((mueffc(i+1,j+1)*...
                            dxblock(i+2,j+1) + mueffc(i+2,j+1)*dxblock(i+1,j+1))...
                            /(dxblock(i+2,j+1)+dxblock(i+1,j+1))*dyblock(i+1,j) + ...
                            (mueffc(i+1,j)*dxblock(i+2,j) + mueffc(i+2,j)*...
                            dxblock(i+1,j))/(dxblock(i+2,j)+dxblock(i+1,j))*...
                            dyblock(i+1,j+1))/(dyblock(i+1,j+1) + dyblock(i+1,j)))...
                            /(ynodel(i+1,j+1)-ynodel(i+1,j));
                    end
                    
                    %Implicit BC: u*(1, (jin+1):N_ytot) = 0; Do not need to change anything!
                    %Implicit BC: u*(1, 1:jin) = Uin; Change in the source term!
                    
                end
            end
            for i = 1:(N_xtot-3)
                for j = 1:(N_ytot-2)
                    %Term for u*(i+1,j) %(+1) on i; (+1) on j
                    AmatU(i+(j-1)*(N_xtot-2), i+(j-1)*(N_xtot-2)+1) = ...
                        k/(xnodel(i+2,j+1)-xnodel(i+1,j+1))*...
                        (rhoc*(u(i+2,j+1)+u(i+1,j+1))/4 - ...
                        2*mueffc(i+2,j+1)/dxblock(i+2,j+1)); 
                    %Term for u*(i-1,j) %(+2) on i; (+1) on j
                    AmatU(i+(j-1)*(N_xtot-2)+1, i+(j-1)*(N_xtot-2)) = ...
                        1/rhoc/(xnodel(i+3,j+1)-xnodel(i+2,j+1))*...
                        (rhoc*(u(i+2,j+1)+u(i+1,j+1))/4 + ...
                        2*mueffc(i+2,j+1)/dxblock(i+2,j+1));
                end
            end
            for i = 1:(N_xtot-2)
                for j = 1:(N_ytot-3)
                    %Term for u*(i,j+1) %(+1) on i; (+1) on j
                    AmatU(i+(j-1)*(N_xtot-2), i+j*(N_xtot-2)) = ...
                        k/dyblock(i+1,j+1)*(rho_2*v2)*dyblock(i+1,j+1)...
                        /(dyblock(i+1,j+1)+dyblock(i+1,j+2)) - ...
                        k/dyblock(i+1,j+1)*mu2/...
                        (ynodel(i+1,j+2) - ynodel(i+1,j+1));
                    %Term for u*(i,j-1) %(+1) on i; (+2) on j
                    AmatU(i+j*(N_xtot-2), i+(j-1)*(N_xtot-2)) = ...
                        - 1/rhoc/dyblock(i+1,j+2)*...
                        (rhoc*(v(i+1,j+1)*dxblock(i+2,j+2) + ...
                        v(i+2,j+1)*dxblock(i+1,j+2))/(dxblock(i+2,j+2) + dxblock(i+1,j+2)))*...
                        dyblock(i+1,j+2)/(dyblock(i+1,j+1)+dyblock(i+1,j+2)) ... 
                        - 1/rhoc/dyblock(i+1,j+2)*(((mueffc(i+1,j+2)*dxblock(i+2,j+2) ...
                        + mueffc(i+2,j+2)*dxblock(i+1,j+2))/...
                        (dxblock(i+2,j+2)+dxblock(i+1,j+2))*dyblock(i+1,j+1) + ...
                        (mueffc(i+1,j+1)*dxblock(i+2,j+1) + ...
                        mueffc(i+2,j+1)*dxblock(i+1,j+1))/...
                        (dxblock(i+2,j+1)+dxblock(i+1,j+1))*dyblock(i+1,j+2))...
                        /(dyblock(i+1,j+2) + dyblock(i+1,j+1)))/...
                        (ynodel(i+1,j+2)-ynodel(i+1,j+1));
                end
            end
        end
        
        %% Source term for implicit X-momentum equation
        function [STU] = SourceTermU(Geometry, dt, u, v, p, jin, Uin, rhoc, ...
                mueffc, xnodel, ynodel, N_xtot, N_ytot, dxblock, dyblock)
        %Source Term - Implicit x-momentum solver
            for i = 2:(N_xtot-1)
                for j = 2:(N_ytot-1)
                    k = 1/rhoc;
                    
                    rho_1 = rhoc;
                    v1 = ((v(i,j-1)*dxblock(i+1,j)+v(i+1,j-1)*dxblock(i,j))...
                        /(dxblock(i+1,j)+dxblock(i,j)));
                    mu1 = ((mueffc(i,j)*dxblock(i+1,j) + mueffc(i+1,j)*...
                        dxblock(i,j))/(dxblock(i+1,j)+dxblock(i,j))*dyblock(i,j-1) + ...
                        (mueffc(i,j-1)*dxblock(i+1,j-1) + mueffc(i+1,j-1)*...
                        dxblock(i,j-1))/(dxblock(i+1,j-1)+dxblock(i,j-1))*...
                        dyblock(i,j))/(dyblock(i,j)+dyblock(i,j-1)); %check
                    rho_2 = rhoc;
                    v2 = ((v(i,j)*dxblock(i+1,j)+v(i+1,j)*dxblock(i,j))/...
                        (dxblock(i+1,j)+dxblock(i,j)));
                    mu2 = ((mueffc(i,j)*dxblock(i+1,j) + mueffc(i+1,j)*...
                        dxblock(i,j))/(dxblock(i+1,j)+dxblock(i,j))*dyblock(i,j+1) + ...
                        (mueffc(i,j+1)*dxblock(i+1,j+1) + mueffc(i+1,j+1)*...
                        dxblock(i,j+1))/(dxblock(i+1,j+1)+dxblock(i,j+1))*...
                        dyblock(i,j))/(dyblock(i,j)+dyblock(i,j+1)); %check
                    
                    if(Geometry == 2)
                        SourceX = 1/(rhoc*ynodel(i,j))*...
                            (mueffc(i+1,j)*dxblock(i,j)+mueffc(i,j)*dxblock(i+1,j))/...
                            (dxblock(i+1,j)+dxblock(i,j))*...
                            (((v(i+1,j-1)+v(i+1,j))/2 - (v(i,j) + v(i,j-1))/2)/...
                            (xnodel(i+1,j)-xnodel(i,j)) + ...
                            ((u(i,j+1)*dyblock(i,j)+u(i,j)*dyblock(i,j+1))/...
                            (dyblock(i,j)+dyblock(i,j+1)) - ...
                            (u(i,j)*dyblock(i,j-1) + u(i,j-1)*dyblock(i,j))...
                            /(dyblock(i,j)+dyblock(i,j-1)))/dyblock(i,j)) - ...
                            u(i,j)/ynodel(i,j)*((v(i+1,j) + v(i+1,j-1))/2*dxblock(i,j) ...
                            + (v(i,j) + v(i,j-1))/2*dxblock(i+1,j))/...
                            (dxblock(i+1,j) + dxblock(i,j));
                    else; SourceX = 0; end;
                    
                    STU(i-1,j-1) = k/(xnodel(i+1,j)-xnodel(i,j))*p(i,j) - ...
                        k/(xnodel(i+1,j)-xnodel(i,j))*p(i+1,j) - ... 
                        k/dyblock(i,j)*mu1*(v(i+1,j-1)-v(i,j-1))/...
                        (xnodel(i+1,j)-xnodel(i,j)) + ...
                        k/dyblock(i,j)*mu2*(v(i+1,j)-v(i,j))/...
                        (xnodel(i+1,j)-xnodel(i,j)) + ...
                        u(i,j)/dt + SourceX; 
                    
                    if(i==2 && j <= jin)
                        STU(i-1,j-1) = STU(i-1,j-1) - ... %used to be +
                            1/rhoc/(xnodel(i+1,j)-xnodel(i,j))*...
                            (rhoc*(u(i,j)+Uin)/4 + 2*mueffc(i,j)/dxblock(i,j))*Uin;
                    end
                    
                end
            end
        end
        
        %% A-matrix for implicit Y-momentum equation
        function [AmatV] = SetUpMatrixV(dt, u, v, N_xtot, N_ytot, ...
                dxblock, dyblock, xnodel, ynodel, rhoc, mueffc)
        %Set-up pent. A matrix, rows:(N_xtot-2)*(N_ytot-2), cols:(N_xtot-2)*(N_ytot-2)!
            N_ytotv = N_ytot-1;
            AmatV=zeros((N_xtot-2)*(N_ytotv -2));
            
            for i=1:(N_xtot-2)
                for j=1:(N_ytotv-2)
                    k = rhoc;
                    rho_1 = rhoc; rho_2 = rhoc;
                    u1 = (u(i,j+2)*dyblock(i+1,j+1) + u(i,j+1)*dyblock(i+1,j+2))/...
                        (dyblock(i+1,j+1)+dyblock(i+1,j+2)); 
                    u2 = (u(i+1,j+2)*dyblock(i+1,j+1) + ...
                        u(i+1,j+1)*dyblock(i+1,j+2))/...
                        (dyblock(i+1,j+1)+dyblock(i+1,j+2));
                    muW = ((mueffc(i+1,j+1)*dyblock(i+1,j+2) + ...
                        mueffc(i+1,j+2)*dyblock(i+1,j+1))/...
                        (dyblock(i+1,j+2) + dyblock(i+1,j+1))*dxblock(i,j+1) + ...
                        (mueffc(i,j+1)*dyblock(i,j+2) + ...
                        mueffc(i,j+2)*dyblock(i,j+1))/(dyblock(i,j+2) + ...
                        dyblock(i,j+1))*dxblock(i+1,j+1))/...
                        (dxblock(i,j+1)+dxblock(i+1,j+1));
                    muE = ((mueffc(i+1,j+1)*dyblock(i+1,j+2) + ...
                        mueffc(i+1,j+2)*dyblock(i+1,j+1))/...
                        (dyblock(i+1,j+2) + dyblock(i+1,j+1))*dxblock(i+2,j+1) + ...
                        (mueffc(i+2,j+1)*dyblock(i+2,j+2) + ...
                        mueffc(i+2,j+2)*dyblock(i+2,j+1))/...
                        (dyblock(i+2,j+2) + dyblock(i+2,j+1))*dxblock(i+1,j+1))/...
                        (dxblock(i+2,j+1) + dxblock(i+1,j+1));
                    
                    %Diagonal terms for v*(i,j) (i+1) (j+1)
                    AmatV(i+(j-1)*(N_xtot-2),i+(j-1)*(N_xtot-2)) = k/dt - ...
                        1/dxblock(i+1,j+1)*(rho_1*u1)*dxblock(i,j+1)/...
                        (dxblock(i,j+1)+dxblock(i+1,j+1)) + ... 
                        muW/dxblock(i+1,j+1)/(xnodel(i+1,j+1)-xnodel(i,j+1)) + ...
                        1/dxblock(i+1,j+1)*(rho_2*u2)*dxblock(i+2,j+1)/...
                        (dxblock(i+1,j+1)+dxblock(i+2,j+1)) + ...
                        muE/dxblock(i+1,j+1)/(xnodel(i+2,j+1)-xnodel(i+1,j+1)) - ...
                        (rhoc*(v(i+1,j+1)+v(i+1,j))/4 - ...
                        2*mueffc(i+1,j+1)/dyblock(i+1,j+1))/...
                        (ynodel(i+1,j+2)-ynodel(i+1,j+1)) + ...
                        (rhoc*(v(i+1,j+2)+v(i+1,j+1))/4 + ...
                        2*mueffc(i+1,j+2)/dyblock(i+1,j+2))/(ynodel(i+1,j+2)-ynodel(i+1,j+1));
                        
                    %Implicit BC: v*(N_xtot,:) = v*(N_xtot-1,:)
                    if(i==(N_xtot-2))
                        AmatV(i+(j-1)*(N_xtot-2),i+(j-1)*(N_xtot-2)) = ...
                            AmatV(i+(j-1)*(N_xtot-2),i+(j-1)*(N_xtot-2)) + ...
                            rho_2/dxblock(i+1,j+1)*u2*dxblock(i+1,j+1)/...
                            (dxblock(i+1,j+1)+dxblock(i+2,j+1)) - ...
                            muE/dxblock(i+1,j+1)/(xnodel(i+2,j+1)-xnodel(i+1,j+1));
                    end
                    
                    %Implicit BC: v*(:,N_ytot-1) = 0; % Do not need to change anything
                    %Implicit BC: v*(:,1) = 0; %Do not need to change anything
                    
                    %Implicit BC: v*(1, 1:jin-1) = Vin; Change in the source term!
                    %Implicit BC: v*(1, jin:N_ytot) = 0; Do not need to change anything 
                    
                end
            end
            for i=1:(N_xtot-3)
                for j =1:(N_ytotv-2)
                    %Term for v*(i+1,j) %(+1) on i; (+1) on j
                    AmatV(i+(j-1)*(N_xtot-2), i+(j-1)*(N_xtot-2)+1) = ...
                        rho_2/dxblock(i+1,j+1)*u2*dxblock(i+1,j+1)/...
                        (dxblock(i+1,j+1)+dxblock(i+2,j+1)) - ...
                        muE/dxblock(i+1,j+1)/...
                        (xnodel(i+2,j+1)-xnodel(i+1,j+1));
                    %Term for v*(i-1,j) %(+2) on i; (+1) on j
                    AmatV(i+(j-1)*(N_xtot-2)+1, i+(j-1)*(N_xtot-2)) = ...
                        - rhoc/dxblock(i+2,j+1)*(u(i+1,j+2)*...
                        dyblock(i+2,j+1) + u(i+1,j+1)*dyblock(i+2,j+2))/...
                        (dyblock(i+2,j+1)+dyblock(i+2,j+2))*...
                        dxblock(i+2,j+1)/(dxblock(i+1,j+1)+dxblock(i+2,j+1)) - ...
                        (((mueffc(i+2,j+1)*dyblock(i+2,j+2) + ...
                        mueffc(i+2,j+2)*dyblock(i+2,j+1))/...
                        (dyblock(i+2,j+2) + dyblock(i+2,j+1))*dxblock(i+1,j+1) + ...
                        (mueffc(i+1,j+1)*dyblock(i+1,j+2) + ...
                        mueffc(i+1,j+2)*dyblock(i+1,j+1))/...
                        (dyblock(i+1,j+2) + dyblock(i+1,j+1))*dxblock(i+2,j+1))/...
                        (dxblock(i+1,j+1)+dxblock(i+2,j+1)))...
                        /dxblock(i+2,j+1)/(xnodel(i+2,j+1)-xnodel(i+1,j+1));
                end
            end
            for i=1:(N_xtot-2)
                for j=1:(N_ytotv-3)
                    %Term for v*(i,j+1) %(+1) on i; (+1) on j
                    AmatV(i+(j-1)*(N_xtot-2), i+j*(N_xtot-2)) = ...
                        (rhoc*(v(i+1,j+2)+v(i+1,j+1))/4 - ...
                        2*mueffc(i+1,j+2)/dyblock(i+1,j+2))/...
                        (ynodel(i+1,j+2)-ynodel(i+1,j+1));
                    %Term for v*(i,j-1) %(+1) on i; (+2) on j
                    AmatV(i+j*(N_xtot-2), i+(j-1)*(N_xtot-2)) = ...
                        - (rhoc*(v(i+1,j+2)+v(i+1,j+1))/4 + ...
                        2*mueffc(i+1,j+2)/dyblock(i+1,j+2))/...
                        (ynodel(i+1,j+3)-ynodel(i+1,j+2));
                        
                end
            end
        end
        
        %% Source term for implicit Y-momentum equation
        function [STV] = SourceTermV(Geometry, dt, u, v, p, jin, Uin, ...
                rhoc, mueffc, xnodel, ynodel, N_xtot, ...
                N_ytot, dxblock, dyblock)
        %Source Term - Implicit x-momentum solver
            for i=2:(N_xtot-1)
                for j=2:(N_ytot-2)
                    k = rhoc;
                    muWsource = ((mueffc(i,j)*dyblock(i,j+1) + ...
                        mueffc(i,j+1)*dyblock(i,j))/(dyblock(i,j+1) ...
                        + dyblock(i,j))*dxblock(i-1,j) + ...
                        (mueffc(i-1,j)*dyblock(i-1,j+1) + ...
                    mueffc(i-1,j+1)*dyblock(i-1,j))/(dyblock(i-1,j+1) ...
                        + dyblock(i-1,j))*dxblock(i,j))/(dxblock(i-1,j)+dxblock(i,j));
                    muEsource = ((mueffc(i,j)*dyblock(i,j+1) + ...
                        mueffc(i,j+1)*dyblock(i,j))/(dyblock(i,j+1) + ...
                        dyblock(i,j))*dxblock(i+1,j) + ...
                        (mueffc(i+1,j)*dyblock(i+1,j+1) + ...
                        mueffc(i+1,j+1)*dyblock(i+1,j))/(dyblock(i+1,j+1) ...
                        + dyblock(i+1,j))*dxblock(i,j))/(dxblock(i+1,j) + dxblock(i,j));
                    
                    %Source Term (Axisymmetric)
                    if(Geometry == 2)
                        SourceY = -((v(i,j))^2)/(ynodel(i,j) + dyblock(i,j)/2) + ...
                            2/rhoc*(mueffc(i,j+1)*dyblock(i,j) + ...
                            mueffc(i,j)*dyblock(i,j+1))/(dyblock(i,j)+dyblock(i,j+1))* ...
                            ((v(i,j+1)+v(i,j))/2 - (v(i,j) + v(i,j-1))/2)/...
                            (ynodel(i,j+1)-ynodel(i,j)) - ...
                            2/rhoc*(mueffc(i,j+1)*dyblock(i,j) + ...
                            mueffc(i,j)*dyblock(i,j+1))/(dyblock(i,j) +...
                            dyblock(i,j+1))*v(i,j)/((ynodel(i,j) + dyblock(i,j)/2)^2);
                    else; SourceY = 0; end;
                    
                    STV(i-1,j-1) = k*v(i,j)/dt - ...
                        muWsource/dxblock(i,j)*(u(i-1,j+1)-u(i-1,j))/...
                        (ynodel(i,j+1)-ynodel(i,j)) + ...
                        muEsource/dxblock(i,j)*(u(i,j+1)-u(i,j))/...
                        (ynodel(i,j+1)-ynodel(i,j)) + p(i,j)/...
                        (ynodel(i,j+1)-ynodel(i,j)) - p(i,j+1)/...
                        (ynodel(i,j+1)-ynodel(i,j)) + SourceY;
                    
                    %put the bc for Vin!
%                     if(i==2 && j >= jin) %jin+1?
%                         STV(i-1,j-1) = STV(i-1,j-1) + 1/rhoc/(xnodel(i+1,j)-xnodel(i,j))*...
%                           (rhoc*(u(i,j)+u(i-1,j))/4 + 2*mueffc(i,j)/dxblock(i,j))*Uin;
%                     end
                    
                end
            end
        end   
        
    end
    
end