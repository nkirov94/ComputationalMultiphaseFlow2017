function [RHS] = epsExplicitRHSke(Geometry, k, eps, ceps1, ceps2, f1, f2, mueffcEps, ...
    i, j, xnodel, ynodel, dxblock, dyblock, mutc, rhoc, u, v, N_xtot, N_ytot)
    %RHS of eps-equation!!

    %k.1) Transport of eps by advection!
    %Central differencing of source terms eddy viscosity.
    dmudx = (mueffcEps(i+1,j)-mueffcEps(i-1,j))/...
        (xnodel(i+1,j)-xnodel(i-1,j));
    dmudy = (mueffcEps(i,j+1)-mueffcEps(i,j-1))/...
        (ynodel(i,j+1)-ynodel(i,j-1));

    Fkconv = 3; %1) Central differencing 2) 1st-order upwind
    %             3) 2nd-order upwind for convection term
    switch Fkconv
        case 1 %Transport of k by convection - Central differencing
            Conv_epsx = (eps(i+1,j)-eps(i-1,j))/...
                (xnodel(i+1,j)-xnodel(i-1,j))*(u(i-1,j)+u(i,j))/2;
            Conv_epsy = (eps(i,j+1)-eps(i,j-1))/...
                (ynodel(i,j+1)-ynodel(i,j-1))*(v(i,j)+v(i,j-1))/2;
        case 2 %Transport of k by convection - First-Order Upwind
            if((u(i,j)+u(i-1,j))/2 > 0)
                Conv_epsx = (eps(i,j) - eps(i-1,j))/...
                    (xnodel(i,j)-xnodel(i-1,j))*(u(i,j)+u(i-1,j))/2;
            else
                Conv_epsx = (eps(i+1,j)-eps(i,j))/...
                    (xnodel(i+1,j)-xnodel(i,j))*(u(i-1,j)+u(i,j))/2;
            end

            if((v(i,j) + v(i,j-1))/2 > 0)
                Conv_epsy = (eps(i,j) - eps(i,j-1))/...
                    (ynodel(i,j)-ynodel(i,j-1))*(v(i,j)+v(i,j-1))/2;
            else
                Conv_epsy = (eps(i,j+1)-eps(i,j))/...
                    (ynodel(i,j+1)-ynodel(i,j))*(v(i,j)+v(i,j-1))/2;
            end
        case 3 %Transport of eps by convection - Second-Order Upwind
            if((u(i,j)+u(i-1,j))/2 > 0)
                if(i == 2)
                    Conv_epsx = (eps(i,j) - eps(i-1,j))/...
                        (xnodel(i,j)-xnodel(i-1,j))*(u(i,j)+u(i-1,j))/2;
                else
                    Conv_epsx = (3*eps(i,j) - 4*eps(i-1,j) + eps(i-2,j))/...
                        (xnodel(i,j)-xnodel(i-2,j))*(u(i,j)+u(i-1,j))/2;
                end
            else
                if(i == N_xtot-1)
                    Conv_epsx = (eps(i+1,j) - eps(i,j))/...
                        (xnodel(i+1,j)-xnodel(i,j))*(u(i,j)+u(i-1,j))/2;
                else
                    Conv_epsx = (-3*eps(i,j) + 4*eps(i+1,j) - eps(i+2,j))/...
                        (xnodel(i+2,j)-xnodel(i,j))*(u(i,j)+u(i-1,j))/2;
                end
            end

            if((v(i,j)+v(i,j-1))/2 > 0)
                if(j == 2)
                    Conv_epsy = (eps(i,j) - eps(i,j-1))/...
                        (ynodel(i,j)-ynodel(i,j-1))*(v(i,j)+v(i,j-1))/2;
                else
                    Conv_epsy = (3*eps(i,j) - 4*eps(i,j-1) + eps(i,j-2))/...
                        (ynodel(i,j)-ynodel(i,j-2))*(v(i,j)+v(i,j-1))/2;
                end
            else
                if(j == N_ytot-1)
                    Conv_epsy = (eps(i,j+1) - eps(i,j))/...
                        (ynodel(i,j+1)-ynodel(i,j))*(v(i,j)+v(i,j-1))/2;
                else
                    Conv_epsy = (-3*eps(i,j) + 4*eps(i,j+1) - eps(i,j+2))/...
                        (ynodel(i,j+2)-ynodel(i,j))*(v(i,j)+v(i,j-1))/2;
                end
            end
    end
    
    Sourcemux = 0; Sourcemuy = 0;
%     %Source term effective viscosity sig eps
%     if(dmudx/rhoc > 0)
%         Sourcemux = (eps(i,j) - eps(i-1,j))/...
%             (xnodel(i,j)-xnodel(i-1,j))*dmudx/rhoc;
%     else
%         Sourcemux = (eps(i+1,j) - eps(i,j))/...
%             (xnodel(i+1,j)-xnodel(i,j))*dmudx/rhoc;
%     end
% 
%     if(dmudy/rhoc > 0)
%         Sourcemuy = (eps(i,j) - eps(i,j-1))/...
%             (ynodel(i,j)-ynodel(i,j-1))*dmudy/rhoc;
%     else
%         Sourcemuy = (eps(i,j+1) - eps(i,j))/...
%             (ynodel(i,j+1)-ynodel(i,j))*dmudy/rhoc;
%     end

    %Calculate Rate of strain tensors Sxy = Syx! Symmetrical!
    Sxx = (u(i,j) - u(i-1,j))/dxblock(i,j);
    Syy = (v(i,j) - v(i,j-1))/dyblock(i,j);
    Sxy = 1/2*(   ( 1/2*( (u(i,j+1)*dyblock(i,j)+u(i,j)*dyblock(i,j+1))/...
        (dyblock(i,j+1)+dyblock(i,j)) +...
        (u(i-1,j+1)*dyblock(i,j)+u(i-1,j)*dyblock(i,j+1))/...
        (dyblock(i,j+1)+dyblock(i,j)) ) -...
        1/2*( (u(i,j)*dyblock(i,j-1)+u(i,j-1)*dyblock(i,j))/...
        (dyblock(i,j)+dyblock(i,j-1)) +...
        (u(i-1,j)*dyblock(i,j-1)+u(i-1,j-1)*dyblock(i,j))/...
        (dyblock(i,j)+dyblock(i,j-1)) ) )/dyblock(i,j) +...
        ...
        1/2*( (v(i+1,j)*dxblock(i,j)+v(i,j)*dxblock(i+1,j))/...
        (dxblock(i+1,j)+dxblock(i,j)) +...
        (v(i+1,j-1)*dxblock(i,j) + v(i,j-1)*dxblock(i+1,j))/...
        (dxblock(i+1,j)+dxblock(i,j)) -...
        (v(i,j)*dxblock(i-1,j)+v(i-1,j)*dxblock(i,j))/...
        (dxblock(i,j)+dxblock(i-1,j)) -...
        (v(i,j-1)*dxblock(i-1,j)+v(i-1,j-1)*dxblock(i,j))/...
        (dxblock(i,j)+dxblock(i-1,j)) )/dxblock(i,j)   );

    %k.2) Production rate of eps!
    normS = sqrt(2*Sxx^2 + 2*Syy^2 + 4*Sxy^2);
    PROD = eps(i,j)/k(i,j)*ceps1*f1(i,j)*mutc(i,j)/rhoc*normS^2;

    %k.3) Dissipation rate of eps!
    DISS = ceps2*f2(i,j)*((eps(i,j))^2)/k(i,j);

    %k.4) Transport of k by diffusion!
    Diff_epsx = 1/(rhoc*dxblock(i,j))*...
        ( (mueffcEps(i+1,j)*dxblock(i,j)+mueffcEps(i,j)*dxblock(i+1,j))/...
        (dxblock(i+1,j)+dxblock(i,j))*(eps(i+1,j)-eps(i,j))/(xnodel(i+1,j)-xnodel(i,j)) -...
        (mueffcEps(i,j)*dxblock(i-1,j)+mueffcEps(i-1,j)*dxblock(i,j))/...
        (dxblock(i,j)+dxblock(i-1,j))*(eps(i,j)-eps(i-1,j))/(xnodel(i,j)-xnodel(i-1,j)) );
    Diff_epsy = 1/(rhoc*dyblock(i,j))*( (mueffcEps(i,j+1)*dyblock(i,j)+ ...
        mueffcEps(i,j)*dyblock(i,j+1))/(dyblock(i,j+1)+dyblock(i,j))*...
        (eps(i,j+1)-eps(i,j))/(ynodel(i,j+1)-ynodel(i,j)) -...
        (mueffcEps(i,j)*dyblock(i,j-1)+mueffcEps(i,j-1)*dyblock(i,j))/...
        (dyblock(i,j)+dyblock(i,j-1))*(eps(i,j)-eps(i,j-1))/(ynodel(i,j)-ynodel(i,j-1)) );

    %k.5) Axisymmetric source!
    if(Geometry == 2 || Geometry == 3)
        SourceAxiSym = 1/ynodel(i,j)*(mueffcEps(i,j))/rhoc*...
            (eps(i,j+1) - eps(i,j-1))/(ynodel(i,j+1)-ynodel(i,j-1));
    else; SourceAxiSym = 0; end;

    %Assembly
    RHS = - Conv_epsx - Conv_epsy + PROD - DISS + Diff_epsx + Diff_epsy + ...
        SourceAxiSym + Sourcemux + Sourcemuy;

end