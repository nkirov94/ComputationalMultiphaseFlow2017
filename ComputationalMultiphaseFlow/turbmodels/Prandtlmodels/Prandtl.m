classdef Prandtl
    
    methods (Static)
        %% PRANDTL'S 1-EQUATION MODEL
        function [mutc, mueffc, TKE, TKE_vec, k_plus, eps, eps_plus, residTKE, Lmix, AmatK, STK] = PrandtlOneEquationModel(Geometry, ...
                    N_xtot, N_ytot, dxblock, dyblock, u, v, dt, ChooseMLsolver, xnodel, ynodel, R_geom, y_plus, ydist, ...
                    A_plus, k0, k_vk, TKE, TKE_vec, mutc, mumolc, mueffc, rhoc, u_tau, jin, kinlet)
        %PRANDTL'S 1-EQUATION MODEL!!
            for i=2:N_xtot-1
                for j=2:N_ytot-1
                    [Lmix(i,j)] = Prandtl.MixingLengthSolver(ChooseMLsolver, xnodel(i,j), ynodel(i,j), ...
                        R_geom, y_plus(i,j), ydist(i,j), A_plus, k0, k_vk);
                    fmu(i,j) = 1 - exp(-y_plus(i,j)/42);
                    gmu(i,j) = (1 + 5*(ydist(i,j)/R_geom)^3)/(1+15*(ydist(i,j)/R_geom)^3);
                    Lmu(i,j) = ydist(i,j)*fmu(i,j)*gmu(i,j);
                end
            end
            Lmu(:,N_ytot) = Lmu(:,N_ytot-1); Lmu(N_xtot,:) = Lmu(N_xtot-1,:);
            %BCs on mixing length
            Lmix(:,N_ytot) = 0;
            Lmix(N_xtot,:) = Lmix(N_xtot-1,:);
            
            %CHOOSE k-equation solver!
            kSteadyUnsteady = 32; %31 = unsteady implicit, 32 = unsteady explicit, 33 = steady implicit
            
            %UNSTEADY/STEADY k-equation
            TKEnext = TKE;
            residTKE = 1;
            %while (residTKE>(1e-1))
            for iter = 1:2
                TKE = TKEnext;
                switch kSteadyUnsteady
                    case 31 %Unsteady Implicit 1-eq model
                        [STK] = ...
                            Prandtl.SourceTermKUnsteady(Geometry, ...
                            N_xtot, N_ytot, TKE, mutc, rhoc, dxblock, ...
                            dyblock, u, v, dt, jin, mueffc, kinlet, xnodel, ynodel);
                        [AmatK] = Prandtl.kAmatrixUnsteady(Geometry, ...
                            N_xtot, N_ytot, xnodel, ynodel, dxblock, dyblock, u, v, ...
                            dt, rhoc, mueffc, TKE, Lmix, jin);
                    case 32 %Unsteady Explicit 1-eq model
                        C_D = 0.06;
                        [TKEnext] = Prandtl.kExplicitSolver(Geometry, ...
                            TKE, xnodel, ynodel, dxblock, dyblock, N_xtot, N_ytot, dt,...
                            mumolc, mutc, Lmix, rhoc, u, v, jin, kinlet, C_D);
                        AmatK = 0; STK = 0;
                    case 33 %Steady Implicit 1-eq model
                        [STK] = Prandtl.SourceTermKSteady(Geometry, ...
                            N_xtot, N_ytot, mutc, rhoc, dxblock, dyblock, u, v);
                        [AmatK] = Prandtl.kAmatrixSteady(Geometry, ...
                            N_xtot, N_ytot, xnodel, ynodel, dxblock, dyblock, u, v,...
                            rhoc, mueffc, TKE, Lmix);
                end
                if(kSteadyUnsteady == 31 || kSteadyUnsteady == 33)
                    %Under-relaxation if factor is (URfac < 1), Over-relaxation if (URfac > 1)
                    URfacK = 0.8;
                    STK = STK + (1-URfacK)/URfacK*diag(AmatK).*TKE_vec;
                    AmatK(logical(eye(size(AmatK)))) = diag(AmatK)/URfacK;

                    %Solve for k using mldivide
                    TKE_vec = abs(AmatK\STK);

                    %Reshape TKE solution to a N_xtot*N_ytot matrix
                    TKEnext = reshape(TKE_vec, N_xtot-2, N_ytot-2);
                    rows = ones(1,N_ytot-2); TKEnext = [rows; TKEnext; rows];
                    cols = ones(N_xtot,1); TKEnext = [cols TKEnext cols];

                    %BCs on TKE
                    TKEnext(:,1) = TKEnext(:,2);
                    TKEnext(:,N_ytot) = - TKEnext(:,N_ytot-1);
                    TKEnext(1,1:jin) = kinlet; 
                    TKEnext(1, (jin+1):N_ytot) = - TKEnext(2, (jin+1):N_ytot);
                    TKEnext(N_xtot,:) = TKEnext(N_xtot-1,:);
                    
                    %BCs on eps
                    epsnext = zeros(N_xtot,N_ytot);
                    epsnext(2:N_xtot-1,2:N_ytot-1) = ...
                        0.08*((TKEnext(2:N_xtot-1,2:N_ytot-1)).^(3/2))./...
                        Lmix(2:N_xtot-1,2:N_ytot-1);
                    epsnext(:,1) = epsnext(:,2);
                    epsnext(:,N_ytot) = epsnext(:,N_ytot-1);
                    epsnext(N_xtot,:) = epsnext(N_xtot-1,:);
                    
                    %Estimate eddy viscosity
                    mutc = rhoc.*(TKEnext.^(1/2)).*Lmix;
                else
                    %Estimate epsilon model, BCs on epsilon
                    epsnext = zeros(N_xtot,N_ytot);
                    epsnext(2:N_xtot-1,2:N_ytot-1) = ...
                        C_D*((TKEnext(2:N_xtot-1,2:N_ytot-1)).^(3/2))./...
                        Lmix(2:N_xtot-1,2:N_ytot-1);
                    epsnext(:,1) = epsnext(:,2);
                    epsnext(:,N_ytot) = epsnext(:,N_ytot-1);
                    epsnext(N_xtot,:) = epsnext(N_xtot-1,:);

                    %Trial - Axissymmetric pipe Prandtl's one-equation model
                    c_mu = 0.2;
                    mutc = abs(rhoc.*c_mu.*(TKEnext.^(1/2)).*Lmu);
                end
                
                mutc(N_xtot,:) = mutc(N_xtot-1,:);
                mutc(:,1) = mutc(:,2);
                mueffc = mumolc + mutc;
                
                %Calculate L2 norm residual on k
                residTKE = norm(TKEnext - TKE)./norm(TKE);
            end
            
            %Equate to next TKE, Eps; Estimate non-dimensional turbulent parameters
            TKE = TKEnext;
            k_plus = TKEnext./(u_tau.^2); k_plus(:,1) = k_plus(:,2); 
            k_plus(1,:) = 0; k_plus(:,N_ytot) = 0;
            eps = epsnext;
            eps_plus = epsnext.*mumolc./rhoc./(u_tau.^4); 
            eps_plus(:,1) = eps_plus(:,2); eps_plus(1,:) = eps_plus(2,:); 
            eps_plus(:,N_ytot) = eps_plus(:,N_ytot-1);
        end 
        
        %% PRANDTL'S MIXING LENGTH MODEL (NON-OPERATIONAL)
        function [mutc, mueffc, Lmix] = MLViscosityCalculator(ConstEDDYviscosity, ChooseMLsolver, mumolc, xnodel, ynodel, ...
                    N_xtot, N_ytot, R_geom, rhoc, y_plus, ydist, A_plus, k0, k_vk, dxblock, dyblock, tau_w, jin, u, v, mutc)
        %CALCULATE MIXING LENGTH DYNAMIC VISCOSITY!! 
            for i=2:(N_xtot-1) %-1
                for j=2:(N_ytot-1) %-1
                    [Lmix(i,j)] = Prandtl.MixingLengthSolver( ...
                        ChooseMLsolver,xnodel(i,j),ynodel(i,j),R_geom, ...
                        y_plus(i,j),ydist(i,j),A_plus,k0,k_vk);

                    %Estimate eddy viscosity!
                    [mutc(i,j)] = ...
                        Prandtl.CalculateEddyViscosityML(ConstEDDYviscosity, ...
                        rhoc, dxblock(i-1,j), dxblock(i+1,j), dxblock(i,j), ...
                        dyblock(i,j), dyblock(i,j-1), dyblock(i,j+1), i, j, ...
                        tau_w(i,j), Lmix(i,j), jin, ...
                        u(i-1,j), u(i,j), u(i,j-1), u(i,j+1), u(i-1,j-1), u(i-1,j+1), ...
                        v(i-1,j), v(i+1,j), v(i,j), v(i,j-1), v(i+1,j-1), ...
                        v(i-1,j-1), y_plus(i,j), mutc(i,j-1), N_ytot);
                end
            end
            
            %BCs on mixing length
            Lmix(:,N_ytot) = 0;%Lmix(:,N_ytot-1);
            Lmix(N_xtot,:) = Lmix(N_xtot-1,:);
            
            %BCs on dynamic eddy viscosity
            mutc(1,:) = 0; mutc(:,N_ytot) = 0; %Dirichlet BCs
            mutc(:,1) = mutc(:,2); %Neumann BC
            mutc(N_xtot,:) = mutc(N_xtot-1,:); %Neumann BC
            
            %Combine the Eddy and Molecular viscosity to Effective Viscosity
            mueffc = mumolc + mutc;
            
        end
        
    end
    
    methods (Static)
%% USED FOR UNSTEADY EXPLICIT PRANDTL'S 1-EQUATION MODEL
        %% Mixing length calculator
        function [LmixP] = MixingLengthSolver(ChooseMLsolver, xP, yP, R_geom, y_plusP, ydistP, A_plus, k0, k_vk)
        %CALCULATE MIXING LENGTH0.
            switch ChooseMLsolver
                case 1 %Van Driest
                    if(yP>=((1-k0/k_vk)*R_geom) || xP<=((k0/k_vk)*R_geom))
                        LmixP = k_vk*ydistP*(1-exp(-y_plusP/A_plus)); 
                        %VAN DRIEST CLOSE TO THE WALLS!
                    else
                        LmixP = k0*R_geom; 
                        %CONSTANT K COEFFICIENT FAR AWAY FROM THE WALLS!
                    end
                    %Trial with Van Driest only
                    %LmixP = k_vk*ydistP*(1-exp(-y_plusP/A_plus));
                    %Trial: Turbulence Modelling in pipe flow
%                     Ld = ydistP*(1+(3/4)*(ydistP/R_geom)^2)/(1+13*(ydistP/R_geom)^2);
%                     LmixP = Ld;
                case 2 %Nikuradse
                    LmixP = R_geom*(  0.14-0.08*(1-ydistP/R_geom)^2 -...
                        0.06*(1-ydistP/R_geom)^4  );
            end
        end
        
        %% Explicit TKE solver
        function [knext] = kExplicitSolver(Geometry, TKE, xnodel, ynodel, dxblock, dyblock, N_xtot, N_ytot, dt, mumolc, ...
                mutoldc, Lmixold, rhoc, u, v, jin, kinlet, C_D)
        %PRANDTL's ONE-EQUATION EXPLICIT SOLVER FOR UNSTEADY K!!
            sig_k = 0.5;
            mueffcSigK = mumolc + mutoldc./sig_k;
            for i = 2:N_xtot-1
                for j = 2:N_ytot-1
                    TimeDiscretizer = 2;
                    switch TimeDiscretizer
                        case 1 %Euler-forward
                            [kRHSn] = Prandtl.kExplicitRHS(Geometry, ...
                                TKE, i, j, xnodel, ynodel, dxblock, dyblock, mutoldc, ...
                                mueffcSigK, Lmixold, rhoc, u, v, N_xtot, N_ytot, C_D);
                            knext(i,j) = abs(TKE(i,j) + dt*kRHSn);
                        case 2 %Runge-Kutta 4th order
                            [k1] = Prandtl.kExplicitRHS(Geometry, TKE, i, j, ...
                                xnodel, ynodel, dxblock, dyblock, mutoldc, mueffcSigK, ...
                                Lmixold, rhoc, u, v, N_xtot, N_ytot, C_D);
                            [k2] = Prandtl.kExplicitRHS(Geometry, TKE + 1/2*dt*k1, ...
                                i, j, xnodel, ynodel, dxblock, dyblock, mutoldc, mueffcSigK, ...
                                Lmixold, rhoc, u, v, N_xtot, N_ytot, C_D);
                            [k3] = Prandtl.kExplicitRHS(Geometry, TKE + 1/2*dt*k2, ...
                                i, j, xnodel, ynodel, dxblock, dyblock, mutoldc, mueffcSigK, ...
                                Lmixold, rhoc, u, v, N_xtot, N_ytot, C_D);
                            [k4] = Prandtl.kExplicitRHS(Geometry, TKE + dt*k3, ...
                                i, j, xnodel, ynodel, dxblock, dyblock, mutoldc, mueffcSigK, ...
                                Lmixold, rhoc, u, v, N_xtot, N_ytot, C_D);
                            knext(i,j) = abs(TKE(i,j) + 1/6*(k1 + k2 + k3 + k4)*dt);
                    end
                end
            end
            
            %BCs on TKE
            knext(:,N_ytot) = - knext(:,N_ytot-1);
            knext(N_xtot,:) = knext(N_xtot-1,:);
            knext(:,1) = knext(:,2);
            knext(1,1:jin) = kinlet; 
            knext(1, (jin+1):N_ytot) = - knext(2, (jin+1):N_ytot);
            
        end
        
        %% Explicit TKE RHS
        function [kRHS] = kExplicitRHS(Geometry, TKE, i, j, xnodel, ynodel, dxblock, dyblock, mutoldc, mueffcSigK, ...
                Lmixold, rhoc, u, v, N_xtot, N_ytot, C_D)
        %RHS of k-equation!!
            %C_D = 0.08; %0.08; %0.313;
            k = TKE;
            
            %k.1) Transport of k by Convection!
            %Central differencing of source terms eddy viscosity.
            dmudx = (mueffcSigK(i+1,j)-mueffcSigK(i-1,j))/...
                (xnodel(i+1,j)-xnodel(i-1,j));
            dmudy = (mueffcSigK(i,j+1)-mueffcSigK(i,j-1))/...
                (ynodel(i,j+1)-ynodel(i,j-1));
            
            Fkconv = 3; %1) Central differencing 2) 1st-order upwind 
%             3) 2nd-order upwind for convection term
            switch Fkconv
                case 1 %Transport of k by convection - Central differencing 
                    Conv_kx = (k(i+1,j)-k(i-1,j))/...
                        (xnodel(i+1,j)-xnodel(i-1,j))*(u(i-1,j)+u(i,j))/2;
                    Conv_ky = (k(i,j+1)-k(i,j-1))/...
                        (ynodel(i,j+1)-ynodel(i,j-1))*(v(i,j)+v(i,j-1))/2; 
                case 2 %Transport of k by convection - First-Order Upwind
                    if((u(i,j)+u(i-1,j))/2 > 0)
                        Conv_kx = (k(i,j) - k(i-1,j))/...
                            (xnodel(i,j)-xnodel(i-1,j))*(u(i,j)+u(i-1,j))/2; 
                    else
                        Conv_kx = (k(i+1,j)-k(i,j))/...
                            (xnodel(i+1,j)-xnodel(i,j))*(u(i-1,j)+u(i,j))/2;
                    end
                    
                    if((v(i,j) + v(i,j-1))/2 > 0)
                        Conv_ky = (k(i,j) - k(i,j-1))/...
                            (ynodel(i,j)-ynodel(i,j-1))*(v(i,j)+v(i,j-1))/2;
                    else
                        Conv_ky = (k(i,j+1)-k(i,j))/...
                            (ynodel(i,j+1)-ynodel(i,j))*(v(i,j)+v(i,j-1))/2;
                    end
                case 3 %Transport of k by convection - Second-Order Upwind
                    if((u(i,j)+u(i-1,j))/2 > 0)
                        if(i == 2)
                            Conv_kx = (k(i,j) - k(i-1,j))/...
                                (xnodel(i,j)-xnodel(i-1,j))*(u(i,j)+u(i-1,j))/2;
                        else
                            Conv_kx = (3*k(i,j) - 4*k(i-1,j) + k(i-2,j))/...
                                (xnodel(i,j)-xnodel(i-2,j))*(u(i,j)+u(i-1,j))/2;
                        end
                    else
                        if(i == N_xtot-1)
                            Conv_kx = (k(i+1,j) - k(i,j))/...
                                (xnodel(i+1,j)-xnodel(i,j))*(u(i,j)+u(i-1,j))/2;
                        else
                            Conv_kx = (-3*k(i,j) + 4*k(i+1,j) - k(i+2,j))/...
                                (xnodel(i+2,j)-xnodel(i,j))*(u(i,j)+u(i-1,j))/2;
                        end
                    end    
                    
                    if((v(i,j)+v(i,j-1))/2 > 0)
                        if(j == 2)
                            Conv_ky = (k(i,j) - k(i,j-1))/...
                            (ynodel(i,j)-ynodel(i,j-1))*(v(i,j)+v(i,j-1))/2;
                        else
                            Conv_ky = (3*k(i,j) - 4*k(i,j-1) + k(i,j-2))/...
                                (ynodel(i,j)-ynodel(i,j-2))*(v(i,j)+v(i,j-1))/2;
                        end
                    else
                        if(j == N_ytot-1)
                            Conv_ky = (k(i,j+1) - k(i,j))/...
                                (ynodel(i,j+1)-ynodel(i,j))*(v(i,j)+v(i,j-1))/2;
                        else
                            Conv_ky = (-3*k(i,j) + 4*k(i,j+1) - k(i,j+2))/...
                                (ynodel(i,j+2)-ynodel(i,j))*(v(i,j)+v(i,j-1))/2;
                        end
                    end  
            end
            
%             %Source term effective viscosity sig k
%             if(dmudx/rhoc > 0)
%                 Sourcemux = (k(i,j) - k(i-1,j))/...
%                     (xnodel(i,j)-xnodel(i-1,j))*dmudx/rhoc;
%             else
%                 Sourcemux = (k(i+1,j) - k(i,j))/...
%                     (xnodel(i+1,j)-xnodel(i,j))*dmudx/rhoc;
%             end
%             
%             if(dmudy/rhoc > 0)
%                 Sourcemuy = (k(i,j) - k(i,j-1))/...
%                     (ynodel(i,j)-ynodel(i,j-1))*dmudy/rhoc;
%             else
%                 Sourcemuy = (k(i,j+1)-k(i,j))/...
%                     (ynodel(i,j+1)-ynodel(i,j))*dmudy/rhoc;
%             end
            Sourcemux = 0; Sourcemuy = 0;

            %Calculate Rate of strain tensors Sxy = Syx! Symmetrical!
            Sxx = (u(i,j) - u(i-1,j))/dxblock(i,j);
            Syy = (v(i,j) - v(i,j-1))/dyblock(i,j);
            Sxy = 1/2*(   ( 1/2*( (u(i,j+1)*dyblock(i,j)+u(i,j)*dyblock(i,j+1))/...
                (dyblock(i,j+1)+dyblock(i,j)) +...
                    (u(i-1,j+1)*dyblock(i,j)+u(i-1,j)*dyblock(i,j+1))/...
                    (dyblock(i,j+1)+dyblock(i,j)) ) -...
                    1/2*( (u(i,j)*dyblock(i,j-1)+u(i,j-1)*dyblock(i,j))/...
                    (dyblock(i,j)+dyblock(i,j-1)) +...
                    (u(i-1,j)*dyblock(i,j-1)+u(i-1,j-1)*dyblock(i,j))/...
                    (dyblock(i,j)+dyblock(i,j-1)) ) )/dyblock(i,j) +...
                    ...
                    1/2*( (v(i+1,j)*dxblock(i,j)+v(i,j)*dxblock(i+1,j))/...
                    (dxblock(i+1,j)+dxblock(i,j)) +...
                    (v(i+1,j-1)*dxblock(i,j) + v(i,j-1)*dxblock(i+1,j))/...
                    (dxblock(i+1,j)+dxblock(i,j)) -...
                    (v(i,j)*dxblock(i-1,j)+v(i-1,j)*dxblock(i,j))/...
                    (dxblock(i,j)+dxblock(i-1,j)) -...
                    (v(i,j-1)*dxblock(i-1,j)+v(i-1,j-1)*dxblock(i,j))/...
                    (dxblock(i,j)+dxblock(i-1,j)) )/dxblock(i,j)   );
            
            %k.2) Production rate of k!
            normS = sqrt(2*Sxx^2 + 2*Syy^2 + 4*Sxy^2);
            %P_k = ((2*mutoldc(i,j)/rhoc*Sxx - 2/3*k(i,j))*Sxx + ...
            %    (2*mutoldc(i,j)/rhoc*Syy - 2/3*k(i,j))*Syy + ...
            %    4*mutoldc(i,j)/rhoc*Sxy^2);
            P_k = mutoldc(i,j)/rhoc*normS^2;

            %k.3) Dissipation rate of k: epsilon model!
            eps = C_D*((k(i,j))^(3/2))/Lmixold(i,j); 
            
            %k.4) Transport of k by diffusion!
            Diff_kx = 1/(rhoc*dxblock(i,j))*...
                ( (mueffcSigK(i+1,j)*dxblock(i,j)+mueffcSigK(i,j)*dxblock(i+1,j))/...
                (dxblock(i+1,j)+dxblock(i,j))*(k(i+1,j)-k(i,j))/(xnodel(i+1,j)-xnodel(i,j)) -...
               (mueffcSigK(i,j)*dxblock(i-1,j)+mueffcSigK(i-1,j)*dxblock(i,j))/...
               (dxblock(i,j)+dxblock(i-1,j))*(k(i,j)-k(i-1,j))/(xnodel(i,j)-xnodel(i-1,j)) );
            Diff_ky = 1/(rhoc*dyblock(i,j))*( (mueffcSigK(i,j+1)*dyblock(i,j)+ ...
                mueffcSigK(i,j)*dyblock(i,j+1))/(dyblock(i,j+1)+dyblock(i,j))*...
                (k(i,j+1)-k(i,j))/(ynodel(i,j+1)-ynodel(i,j)) -...              
               (mueffcSigK(i,j)*dyblock(i,j-1)+mueffcSigK(i,j-1)*dyblock(i,j))/...
               (dyblock(i,j)+dyblock(i,j-1))*(k(i,j)-k(i,j-1))/(ynodel(i,j)-ynodel(i,j-1)) );
            
            %k.5) Axisymmetric source!
            if(Geometry == 2 || Geometry == 3)
                SourceAxiSym = 1/ynodel(i,j)*(mueffcSigK(i,j))/rhoc*...
                    (k(i,j+1) - k(i,j-1))/(ynodel(i,j+1)-ynodel(i,j-1));
            else; SourceAxiSym = 0; end;
           
            %Assembly
            kRHS = - Conv_kx - Conv_ky + P_k - eps + Diff_kx + Diff_ky + ...
                SourceAxiSym + Sourcemux + Sourcemuy;
        end
        
%% USED FOR UNSTEADY IMPLICIT PRANDTL'S 1-EQUATION MODEL
        %% TKE source term
        function [STK] = SourceTermKUnsteady(Geometry, N_xtot, N_ytot, TKEold, mutoldc, rhoc, dxblock, dyblock, ...
                u, v, dt, jin, mueffc, kinlet, xnodel, ynodel)
            %SOURCE TERM FOR UNSTEADY K IMPLICIT EQUATION
            for i=2:(N_xtot-1)
                for j=2:(N_ytot-1)
                    %Calculate Rate of strain tensors (Sxy = Syx , Symmetrical)
                    Sxx = (u(i,j) - u(i-1,j))/dxblock(i,j);
                    Syy = (v(i,j) - v(i,j-1))/dyblock(i,j);
                    Sxy = 1/2*(   ( 1/2*( (u(i,j+1)*dyblock(i,j)+u(i,j)*dyblock(i,j+1))/...
                        (dyblock(i,j+1)+dyblock(i,j)) +...
                    (u(i-1,j+1)*dyblock(i,j)+u(i-1,j)*dyblock(i,j+1))/...
                    (dyblock(i,j+1)+dyblock(i,j)) ) -...
                    1/2*( (u(i,j)*dyblock(i,j-1)+u(i,j-1)*dyblock(i,j))/...
                    (dyblock(i,j)+dyblock(i,j-1)) +...
                    (u(i-1,j)*dyblock(i,j-1)+u(i-1,j-1)*dyblock(i,j))/...
                    (dyblock(i,j)+dyblock(i,j-1)) ) )/dyblock(i,j) +...
                    ...
                    1/2*( (v(i+1,j)*dxblock(i,j)+v(i,j)*dxblock(i+1,j))/...
                    (dxblock(i+1,j)+dxblock(i,j)) +...
                    (v(i+1,j-1)*dxblock(i,j) + v(i,j-1)*dxblock(i+1,j))/...
                    (dxblock(i+1,j)+dxblock(i,j)) -...
                    (v(i,j)*dxblock(i-1,j)+v(i-1,j)*dxblock(i,j))/...
                    (dxblock(i,j)+dxblock(i-1,j)) -...
                    (v(i,j-1)*dxblock(i-1,j)+v(i-1,j-1)*dxblock(i,j))/...
                    (dxblock(i,j)+dxblock(i-1,j)) )/dxblock(i,j)   );
                    
                    %Production rate of k
                    P_k = ((2*mutoldc(i,j)/rhoc*Sxx - 2/3*TKEold(i,j))*Sxx + ...
                        (2*mutoldc(i,j)/rhoc*Syy - 2/3*TKEold(i,j))*Syy + ...
                        4*mutoldc(i,j)/rhoc*Sxy^2);
                    
                    %Axisymmetric source
                    if(Geometry == 2 || Geometry == 3)
                        SourceAxiSym = 1/ynodel(i,j)*(mueffc(i,j))/rhoc*...
                            (TKEold(i,j+1) - TKEold(i,j-1))/(ynodel(i,j+1)-ynodel(i,j-1));
                    else; SourceAxiSym = 0; end;
                    
                    %Assembly
                    STKmat(i-1,j-1) = P_k + TKEold(i,j)/dt;
                    
                    %Implicit BC: k(1, 1:jin) = kinlet.
                    if(i==2 && j <= jin)
                        STKmat(i-1,j-1) = STKmat(i-1,j-1) + ...
                            ( -1/(xnodel(i+1,j)-xnodel(i-1,j))*(u(i-1,j)+u(i,j))/2 - ...
                            1/(rhoc*dxblock(i,j))*(mueffc(i,j)*dxblock(i-1,j) + ...
                            mueffc(i-1,j)*dxblock(i,j))/...
                            (dxblock(i,j)+dxblock(i-1,j))/...
                            (xnodel(i,j)-xnodel(i-1,j)) )*kinlet;
                    end
                    
                end
            end
            STK = reshape(STKmat, (N_xtot-2)*(N_ytot-2),1);
        end
        
        %% TKE A-matrix
        function [AmatK] = kAmatrixUnsteady(Geometry, N_xtot, N_ytot, xnodel, ynodel, dxblock, dyblock, u, v, dt, rhoc, ...
                mueffc, TKEold, Lmixold,jin) %FIX
            %SET-UP A-MATRIX FOR UNSTEADY IMPLICIT EQUATION FOR K!!
            AmatK=zeros((N_xtot-2)*(N_ytot-2));
            
            for i=1:(N_xtot-2)
                for j=1:(N_ytot-2)
                    C_D = 0.08;
                    epsold = C_D*((TKEold(i+1,j+1))^(3/2))/Lmixold(i+1,j+1); %CHANGE
                    %Diagonal terms for k(i,j)
                    AmatK(i+(j-1)*(N_xtot-2),i+(j-1)*(N_xtot-2)) = 1/dt + ...
                        1/(rhoc*dxblock(i+1,j+1))*(mueffc(i+2,j+1)*...
                        dxblock(i+1,j+1) + mueffc(i+1,j+1)*dxblock(i+2,j+1))/...
                        (dxblock(i+2,j+1)+dxblock(i+1,j+1))/(xnodel(i+2,j+1)-xnodel(i+1,j+1)) +...
                        1/(rhoc*dxblock(i+1,j+1))*(mueffc(i+1,j+1)*dxblock(i,j+1) ...
                        + mueffc(i,j+1)*dxblock(i+1,j+1))/...
                        (dxblock(i+1,j+1)+dxblock(i,j+1))/(xnodel(i+1,j+1)-xnodel(i,j+1)) + ...
                        1/(rhoc*dyblock(i+1,j+1))*(mueffc(i+1,j+2)*dyblock(i+1,j+1) ...
                        + mueffc(i+1,j+1)*dyblock(i+1,j+2))/...
                        (dyblock(i+1,j+2)+dyblock(i+1,j+1))/(ynodel(i+1,j+2)-ynodel(i+1,j+1)) + ...
                        1/(rhoc*dyblock(i+1,j+1))*(mueffc(i+1,j+1)*dyblock(i+1,j) ...
                        + mueffc(i+1,j)*dyblock(i+1,j+1))/...
                        (dyblock(i+1,j+1)+dyblock(i+1,j))/(ynodel(i+1,j+1)-ynodel(i+1,j)) + ...
                        epsold/TKEold(i+1,j+1);
                    
                    %Implicit BC: k(N_xtot,:) = k(N_xtot-1,:)
                    if(i==(N_xtot-2))
                        AmatK(i+(j-1)*(N_xtot-2),i+(j-1)*(N_xtot-2)) = ...
                            AmatK(i+(j-1)*(N_xtot-2),i+(j-1)*(N_xtot-2)) +...
                            1/(xnodel(i+2,j+1)-xnodel(i,j+1))*(u(i,j+1)+u(i+1,j+1))/2 - ...
                            1/(rhoc*dxblock(i+1,j+1))*(mueffc(i+2,j+1)*...
                            dxblock(i+1,j+1) + mueffc(i+1,j+1)*dxblock(i+2,j+1))/...
                            (dxblock(i+2,j+1)+dxblock(i+1,j+1))/...
                            (xnodel(i+2,j+1)-xnodel(i+1,j+1));
                    end
                    
                    %TRIAL
                    %Implicit BC: k(1,(jin+1):N_ytot) = - k(1,(jin+1):N_ytot)
                    if(i==1 && j>jin)
                        AmatK(i+(j-1)*(N_xtot-2),i+(j-1)*(N_xtot-2)) = ...
                            AmatK(i+(j-1)*(N_xtot-2),i+(j-1)*(N_xtot-2)) - ...
                            ( -1/(xnodel(i+2,j+1)-xnodel(i,j+1))*(u(i,j+1)+u(i+1,j+1))/2 - ...
                            1/(rhoc*dxblock(i+1,j+1))*...
                            (mueffc(i+1,j+1)*dxblock(i,j+1) + ...
                            mueffc(i,j+1)*dxblock(i+1,j+1))/...
                            (dxblock(i+1,j+1)+dxblock(i,j+1))/(xnodel(i+1,j+1)-xnodel(i,j+1)) );
                    end
%                     %Implicit BC: k(1, jin:N_ytot-1) = kinlet. Change in source term!
%                     if(i==1 && j >= jin)
%                         AmatK(i+(j-1)*(N_xtot-2),i+(j-1)*(N_xtot-2)) = ...
%                             AmatK(i+(j-1)*(N_xtot-2),i+(j-1)*(N_xtot-2)) + ...
%                             ( -1/(xnodel(i+2,j+1)-xnodel(i,j+1))*(u(i,j+1)+u(i+1,j+1))/2 - ...
%                             1/(rhoc*dxblock(i+1,j+1))*...
%                             (mueffc(i+1,j+1)*dxblock(i+1,j+1) + mueffc(i,j+1)*dxblock(i,j+1))/...
%                             (dxblock(i+1,j+1)+dxblock(i,j+1))/...
%                             (xnodel(i+1,j+1)-xnodel(i,j+1)) )*kinlet;
%                     end
                    
                    
                    %Implicit BC: k(:,1) = k(:,2);
                    if(j == 1)
                        AmatK(i+(j-1)*(N_xtot-2),i+(j-1)*(N_xtot-2)) = ...
                            AmatK(i+(j-1)*(N_xtot-2),i+(j-1)*(N_xtot-2)) +...
                            ( -1/(ynodel(i+1,j+2)-ynodel(i+1,j))*(v(i+1,j+1)+v(i+1,j))/2 - ...
                            1/(rhoc*dyblock(i+1,j+1))*(mueffc(i+1,j+1)*...
                            dyblock(i+1,j+1)+mueffc(i+1,j)*dyblock(i+1,j))/...
                            (dyblock(i+1,j+1)+dyblock(i+1,j))/...
                            (ynodel(i+1,j+1)-ynodel(i+1,j)) );
                    end
                    
                    %Implicit BC: k(:,N_ytot) = - k(:,N_ytot-1)
                    if(j==(N_ytot-2))
                        AmatK(i+(j-1)*(N_xtot-2),i+(j-1)*(N_xtot-2)) = ...
                            AmatK(i+(j-1)*(N_xtot-2),i+(j-1)*(N_xtot-2)) - ...
                            (1/(ynodel(i+1,j+2)-ynodel(i+1,j))*(v(i+1,j+1)+v(i+1,j))/2 - ...
                            1/(rhoc*dyblock(i+1,j+1))*(mueffc(i+1,j+2)*...
                            dyblock(i+1,j+1) + mueffc(i+1,j+1)*dyblock(i+1,j+2))/...
                            (dyblock(i+1,j+2)+dyblock(i+1,j+1))/...
                            (ynodel(i+1,j+2)-ynodel(i+1,j+1)));
                    end
                    
                end
            end
            for i=1:(N_xtot-3)
                for j =1:(N_ytot-2)
                    %Term for k(i+1,j)
                    AmatK(i+(j-1)*(N_xtot-2), i+(j-1)*(N_xtot-2)+1) = ...
                        1/(xnodel(i+2,j+1)-xnodel(i,j+1))*(u(i,j+1)+u(i+1,j+1))/2 - ...
                        1/(rhoc*dxblock(i+1,j+1))*(mueffc(i+2,j+1)*dxblock(i+1,j+1) ...
                        + mueffc(i+1,j+1)*dxblock(i+2,j+1))/...
                        (dxblock(i+2,j+1)+dxblock(i+1,j+1))/(xnodel(i+2,j+1)-xnodel(i+1,j+1));
                    %Term for k(i-1,j) %touch all the is + 1
                    AmatK(i+(j-1)*(N_xtot-2)+1, i+(j-1)*(N_xtot-2)) = ...
                        -1/(xnodel(i+3,j+1)-xnodel(i+1,j+1))*(u(i+1,j+1)+u(i+2,j+1))/2 - ...
                        1/(rhoc*dxblock(i+2,j+1))*(mueffc(i+2,j+1)*dxblock(i+1,j+1) ...
                        + mueffc(i+1,j+1)*dxblock(i+2,j+1))/...
                        (dxblock(i+2,j+1)+dxblock(i+1,j+1))/(xnodel(i+2,j+1)-xnodel(i+1,j+1));
                end
            end
            for i=1:(N_xtot-2)
                for j=1:(N_ytot-3)
                    %Term for k(i,j+1)
                    AmatK(i+(j-1)*(N_xtot-2), i+j*(N_xtot-2)) = ...
                        1/(ynodel(i+1,j+2)-ynodel(i+1,j))*(v(i+1,j+1)+v(i+1,j))/2 - ...
                        1/(rhoc*dyblock(i+1,j+1))*(mueffc(i+1,j+2)*dyblock(i+1,j+1) ...
                        + mueffc(i+1,j+1)*dyblock(i+1,j+2))/...
                        (dyblock(i+1,j+2)+dyblock(i+1,j+1))/(ynodel(i+1,j+2)-ynodel(i+1,j+1));
                    %Term for k(i,j-1) %touch all the js + 1
                    AmatK(i+j*(N_xtot-2), i+(j-1)*(N_xtot-2)) = ...
                        -1/(ynodel(i+1,j+3)-ynodel(i+1,j+1))*(v(i+1,j+2)+v(i+1,j+1))/2 - ...
                        1/(rhoc*dyblock(i+1,j+2))*(mueffc(i+1,j+2)*dyblock(i+1,j+1) ...
                        + mueffc(i+1,j+1)*dyblock(i+1,j+2))/...
                        (dyblock(i+1,j+2)+dyblock(i+1,j+1))/(ynodel(i+1,j+2)-ynodel(i+1,j+1));
                end
            end
        end
        
%% USED FOR STEADY IMPLICIT PRANDTL'S 1-EQUATION MODEL
        %% TKE source term
        function [STK] = SourceTermKSteady(Geometry, N_xtot, N_ytot, mutoldc, rhoc, dxblock, dyblock, u, v) %FIX
            %SOURCE TERM FOR STEADY K IMPLICIT EQUATION
            for i=2:(N_xtot-1)
                for j=2:(N_ytot-1)
                    %Calculate Rate of strain tensors Sxy = Syx! Symmetrical!
                    Sxx = (u(i,j) - u(i-1,j))/dxblock(i,j);
                    Syy = (v(i,j) - v(i,j-1))/dyblock(i,j);
                    Sxy = (   ( 1/2*( (u(i,j+1)*dyblock(i,j)+u(i,j)*dyblock(i,j+1))/...
                        (dyblock(i,j+1)+dyblock(i,j)) +...
                    (u(i-1,j+1)*dyblock(i,j)+u(i-1,j)*dyblock(i,j+1))/...
                    (dyblock(i,j+1)+dyblock(i,j)) ) -...
                    1/2*( (u(i,j)*dyblock(i,j-1)+u(i,j-1)*dyblock(i,j))/...
                    (dyblock(i,j)+dyblock(i,j-1)) +...
                    (u(i-1,j)*dyblock(i,j-1)+u(i-1,j-1)*dyblock(i,j))/...
                    (dyblock(i,j)+dyblock(i,j-1)) ) )/dyblock(i,j) +...
                    ...
                    1/2*( (v(i+1,j)*dxblock(i,j)+v(i,j)*dxblock(i+1,j))/...
                    (dxblock(i+1,j)+dxblock(i,j)) +...
                    (v(i+1,j-1)*dxblock(i,j) + v(i,j-1)*dxblock(i+1,j))/...
                    (dxblock(i+1,j)+dxblock(i,j)) -...
                    (v(i,j)*dxblock(i-1,j)+v(i-1,j)*dxblock(i,j))/...
                    (dxblock(i,j)+dxblock(i-1,j)) -...
                    (v(i,j-1)*dxblock(i-1,j)+v(i-1,j-1)*dxblock(i,j))/...
                    (dxblock(i,j)+dxblock(i-1,j)) )/dxblock(i,j)   );
                    
                    %k.1) Production rate of k!
                    P_k = mutoldc(i,j)/rhoc*( 2*Sxx^2 + 2*Syy^2 + 4*Sxy^2);
                    
                    %Assembly
                    STKmat(i-1,j-1) = P_k;
                    
%                     %Implicit BC: k(1, 1:jin) = kinlet.
%                     if(i==2 && j <= jin)
%                         STKmat(i-1,j-1) = STKmat(i-1,j-1) + ...
%                             ( -1/(xnodel(i+1,j)-xnodel(i-1,j))*(u(i-1,j)+u(i,j))/2 - ...
%                             1/(rhoc*dxblock(i,j))*(mueffc(i,j)*...
%                             dxblock(i-1,j) + mueffc(i-1,j)*dxblock(i,j))/...
%                             (dxblock(i,j)+dxblock(i-1,j))/...
%                             (xnodel(i,j)-xnodel(i-1,j)) )*kinlet;
%                     end
                    
                end
            end
            STK = reshape(STKmat, (N_xtot-2)*(N_ytot-2),1);
        end
        
        %% TKE A-matrix
        function [AmatK] = kAmatrixSteady(Geometry, N_xtot, N_ytot, xnodel, ynodel, dxblock, dyblock, u, v, rhoc, ...
                mueffc, TKEold, Lmixold) %FIX
            %SET-UP A-MATRIX FOR STEADY IMPLICIT EQUATION FOR K!!
            AmatK = zeros((N_xtot-2)*(N_ytot-2));
            
            for i=1:(N_xtot-2)
                for j=1:(N_ytot-2)
                    C_D = 0.08;
                    epsold = C_D*((TKEold(i+1,j+1))^(3/2))/Lmixold(i+1,j+1); %CHANGE
                    %Diagonal terms for k(i,j)
                    AmatK(i+(j-1)*(N_xtot-2),i+(j-1)*(N_xtot-2)) = ...
                        1/(rhoc*dxblock(i+1,j+1))*(mueffc(i+2,j+1)*...
                        dxblock(i+2,j+1) + mueffc(i+1,j+1)*dxblock(i+1,j+1))/...
                        (dxblock(i+2,j+1)+dxblock(i+1,j+1))/(xnodel(i+2,j+1)-xnodel(i+1,j+1)) +...
                        1/(rhoc*dxblock(i+1,j+1))*(mueffc(i+1,j+1)*...
                        dxblock(i+1,j+1) + mueffc(i,j+1)*dxblock(i,j+1))/...
                        (dxblock(i+1,j+1)+dxblock(i,j+1))/(xnodel(i+1,j+1)-xnodel(i,j+1)) + ...
                        1/(rhoc*dyblock(i+1,j+1))*(mueffc(i+1,j+2)*...
                        dyblock(i+1,j+2) + mueffc(i+1,j+1)*dyblock(i+1,j+1))/...
                        (dyblock(i+1,j+2)+dyblock(i+1,j+1))/(ynodel(i+1,j+2)-ynodel(i+1,j+1)) + ...
                        1/(rhoc*dyblock(i+1,j+1))*(mueffc(i+1,j+1)*...
                        dyblock(i+1,j+1) + mueffc(i+1,j)*dyblock(i+1,j))/...
                        (dyblock(i+1,j+1)+dyblock(i+1,j))/(ynodel(i+1,j+1)-ynodel(i+1,j)) + ...
                        epsold/TKEold(i+1,j+1);
                    
                    %Implicit BC: k(N_xtot,:) = k(N_xtot-1,:)
                    if(i==(N_xtot-2))
                        AmatK(i+(j-1)*(N_xtot-2),i+(j-1)*(N_xtot-2)) = ...
                            AmatK(i+(j-1)*(N_xtot-2),i+(j-1)*(N_xtot-2)) +...
                            1/(xnodel(i+2,j+1)-xnodel(i,j+1))*(u(i,j+1)+u(i+1,j+1))/2 - ...
                            1/(rhoc*dxblock(i+1,j+1))*(mueffc(i+2,j+1)*...
                            dxblock(i+2,j+1) + mueffc(i+1,j+1)*dxblock(i+1,j+1))/...
                            (dxblock(i+2,j+1)+dxblock(i+1,j+1))/...
                            (xnodel(i+2,j+1)-xnodel(i+1,j+1));
                    end
                    
                    %Implicit BC: k(1,:) = 0; Do not need to change
                    %anything! TEMPORARILY! FIX!
                    %Implicit BC: k(:,1) = 0; Do not need to change
                    %anything! FIX!
                    
                    %Implicit BC: k(:,N_ytot) = k(:,N_ytot-1)
                    if(j==(N_ytot-2))
                        AmatK(i+(j-1)*(N_xtot-2),i+(j-1)*(N_xtot-2)) = ...
                            AmatK(i+(j-1)*(N_xtot-2),i+(j-1)*(N_xtot-2)) + ...
                            1/(ynodel(i+1,j+2)-ynodel(i+1,j))*(v(i+1,j+1)+v(i+1,j))/2 - ...
                            1/(rhoc*dyblock(i+1,j+1))*(mueffc(i+1,j+2)*...
                            dyblock(i+1,j+2) + mueffc(i+1,j+1)*dyblock(i+1,j+1))/...
                            (dyblock(i+1,j+2)+dyblock(i+1,j+1))/...
                            (ynodel(i+1,j+2)-ynodel(i+1,j+1));
                    end
                end
            end
            for i=1:(N_xtot-3)
                for j =1:(N_ytot-2)
                    %Term for k(i+1,j)
                    AmatK(i+(j-1)*(N_xtot-2), i+(j-1)*(N_xtot-2)+1) = ...
                        1/(xnodel(i+2,j+1)-xnodel(i,j+1))*(u(i,j+1)+u(i+1,j+1))/2 - ...
                        1/(rhoc*dxblock(i+1,j+1))*(mueffc(i+2,j+1)*...
                        dxblock(i+2,j+1) + mueffc(i+1,j+1)*dxblock(i+1,j+1))/...
                        (dxblock(i+2,j+1)+dxblock(i+1,j+1))/...
                        (xnodel(i+2,j+1)-xnodel(i+1,j+1));
                    %Term for k(i-1,j) %touch all the is + 1
                    AmatK(i+(j-1)*(N_xtot-2)+1, i+(j-1)*(N_xtot-2)) = ...
                        -1/(xnodel(i+3,j+1)-xnodel(i+1,j+1))*(u(i+1,j+1)+u(i+2,j+1))/2 - ...
                        1/(rhoc*dxblock(i+2,j+1))*...
                        (mueffc(i+2,j+1)*dxblock(i+2,j+1) + mueffc(i+1,j+1)*dxblock(i+1,j+1))/...
                        (dxblock(i+2,j+1)+dxblock(i+1,j+1))/(xnodel(i+2,j+1)-xnodel(i+1,j+1));
                end
            end
            for i=1:(N_xtot-2)
                for j=1:(N_ytot-3)
                    %Term for k(i,j+1)
                    AmatK(i+(j-1)*(N_xtot-2), i+j*(N_xtot-2)) = ...
                        1/(ynodel(i+1,j+2)-ynodel(i+1,j))*(v(i+1,j+1)+v(i+1,j))/2 - ...
                        1/(rhoc*dyblock(i+1,j+1))*(mueffc(i+1,j+2)*dyblock(i+1,j+2) ...
                        + mueffc(i+1,j+1)*dyblock(i+1,j+1))/...
                        (dyblock(i+1,j+2)+dyblock(i+1,j+1))/(ynodel(i+1,j+2)-ynodel(i+1,j+1));
                    %Term for k(i,j-1) %touch all the js + 1
                    AmatK(i+j*(N_xtot-2), i+(j-1)*(N_xtot-2)) = ...
                        -1/(ynodel(i+1,j+3)-ynodel(i+1,j+1))*(v(i+1,j+2)+v(i+1,j+1))/2 - ...
                        1/(rhoc*dyblock(i+1,j+2))*(mueffc(i+1,j+2)*dyblock(i+1,j+2) ...
                        + mueffc(i+1,j+1)*dyblock(i+1,j+1))/...
                        (dyblock(i+1,j+2)+dyblock(i+1,j+1))/(ynodel(i+1,j+2)-ynodel(i+1,j+1));
                end
            end
        end
        
%% USED FOR PRANDTL'S MIXING LENGTH MODEL (NON-OPERATIONAL)
        %% Estimate TKE for mixing length model
        function [TKELmix, k_plusLmix, epsnext] = TKELmixSolver(Lmix, jin, N_xtot, N_ytot, tau_w, u_tau, ...
                dxblock, dyblock, u, v, kinlet) %FIX
        %TKE USING PRANDTL'S MIXING LENGTH MODEL!!
        for i=2:(N_xtot-1)
        for j=2:(N_ytot-1)
        TKELmix(i,j) = ...
            (Lmix(i,j))^2*(   (( 1/2*( (u(i,j+1)*dyblock(i,j)+u(i,j)*dyblock(i,j+1))...
            /(dyblock(i,j+1)+dyblock(i,j)) +...
        (u(i-1,j+1)*dyblock(i,j)+u(i-1,j)*dyblock(i,j+1))/...
        (dyblock(i,j+1)+dyblock(i,j)) ) -...
        1/2*( (u(i,j)*dyblock(i,j-1)+u(i,j-1)*dyblock(i,j))/...
        (dyblock(i,j)+dyblock(i,j-1)) +...
        (u(i-1,j)*dyblock(i,j-1)+u(i-1,j-1)*dyblock(i,j))/...
        (dyblock(i,j)+dyblock(i,j-1)) ) )/dyblock(i,j)) ... %check this
        ...
        +(1/(2*dxblock(i,j))*( (v(i+1,j)*dxblock(i,j)+v(i,j)*dxblock(i+1,j))/...
        (dxblock(i+1,j)+dxblock(i,j)) +...
        (v(i+1,j-1)*dxblock(i,j) + v(i,j-1)*dxblock(i+1,j))/...
        (dxblock(i+1,j)+dxblock(i,j)) -...
        (v(i,j)*dxblock(i-1,j)+v(i-1,j)*dxblock(i,j))/(dxblock(i,j)+dxblock(i-1,j)) -...
        (v(i,j-1)*dxblock(i-1,j)+v(i-1,j-1)*dxblock(i,j))/...
        (dxblock(i,j)+dxblock(i-1,j)) )))^2; %check this
        k_plusLmix(i,j) = TKELmix(i,j)/(u_tau(i,j))^2;

        if(jin ~= (N_ytot-1))
        if( (i==2 && j>jin) || (i~=2 && j== (N_ytot-1)) )
            TKELmix(i,j) = (Lmix(i,j))^2*(tau_w(i,j))^2;
            k_plusLmix(i,j) = TKELmix(i,j)/(u_tau(i,j))^2;
        end
        else
        if(j== (N_ytot-1))
            TKELmix(i,j) = (Lmix(i,j))^2*(tau_w(i,j))^2;
            k_plusLmix(i,j) = TKELmix(i,j)/(u_tau(i,j))^2;
        end
        end
        end
        end
            %Extend matrix k+
            k_plusLmix(:,N_ytot) = 0;
            k_plusLmix(N_xtot,:) = k_plusLmix(N_xtot-1,:);
            
            %BC on TKE!
            TKELmix(:,1) = TKELmix(:,2); 
            TKELmix(:,N_ytot) = - TKELmix(:,N_ytot-1);
            TKELmix(1,1:jin) = kinlet; 
            TKELmix(1, (jin+1):N_ytot) = - TKELmix(2, (jin+1):N_ytot); 
            TKELmix(N_xtot,:) = TKELmix(N_xtot-1,:);
            
            %Define epsilon. BCs on epsilon!
            epsnext = zeros(N_xtot,N_ytot);
            epsnext(2:N_xtot-1,2:N_ytot-1) = ...
                0.08*((TKELmix(2:N_xtot-1,2:N_ytot-1)).^(3/2))./...
                Lmix(2:N_xtot-1,2:N_ytot-1);
            epsnext(N_xtot,:) = epsnext(N_xtot-1,:); 
            epsnext(:,N_ytot) = epsnext(:,N_ytot-1); epsnext(:,1) = epsnext(:,2);
        end
        
    end
    
end